{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"python-validator python-validator \u662f\u4e00\u4e2a\u7c7b\u4f3c\u4e8e Django ORM \u7684\u6570\u636e\u6821\u9a8c\u5e93\uff0c\u9002\u7528\u4e0e\u4efb\u4f55\u9700\u8981\u8fdb\u884c\u6570\u636e\u6821\u9a8c\u7684\u5e94\u7528\uff0c\u6bd4\u8f83\u5e38\u89c1\u7684\u662f Web \u540e\u7aef\u6821\u9a8c\u524d\u7aef\u7684\u8f93\u5165\u6570\u636e\u3002 \u6587\u6863 \u7279\u6027 \u652f\u6301 python2 \u548c python3\u3002 \u4f7f\u7528\u7c7b\u63cf\u8ff0\u6570\u636e\u7ed3\u6784\uff0c\u6570\u636e\u5b57\u6bb5\u4e00\u76ee\u4e86\u7136\u3002\u53e6\u5916\u4e5f\u652f\u6301\u4f7f\u7528\u5b57\u5178\u5b9a\u4e49\u6570\u636e\u7ed3\u6784\u3002 \u53ef\u4ee5\u81ea\u52a8\u751f\u6210\u7528\u4e8e\u6d4b\u8bd5\u7684 mocking data\u3002 \u53ef\u4ee5\u6253\u5370\u51fa\u6e05\u6670\u7684\u6570\u636e\u7ed3\u6784\u3002 \u6613\u4e8e\u6269\u5c55\u3002 \u4f9d\u8d56 six IPy pytz[\u53ef\u9009\uff0c DatetimeField \u7684 tzinfo \u53c2\u6570\u9700\u8981\u4e00\u4e2a tzinfo \u5bf9\u8c61] \u5b89\u88c5 pip install python-validator \u5feb\u901f\u5165\u95e8 \u5047\u8bbe\u73b0\u5728\u6b63\u5728\u5f00\u53d1\u4e00\u4e2a\u4e0a\u4f20\u7528\u6237\u4fe1\u606f\u7684\u63a5\u53e3 POST /api/user/ \uff0c\u7528\u6237\u4fe1\u606f\u5982\u4e0b\uff1a \u5b57\u6bb5 \u7c7b\u578b \u63cf\u8ff0 name String \u5fc5\u9009 age integer \u53ef\u9009\uff0c\u9ed8\u8ba4 20 sex String, 'f'\u8868\u793a\u5973, 'm'\u8868\u793a\u7537 \u53ef\u9009, \u9ed8\u8ba4 None \u539f\u59cb\u7684\u3001\u67af\u71e5\u65e0\u5473\u7684\u3001\u91cd\u590d\u6027\u52b3\u52a8\u7684\u6570\u636e\u6821\u9a8c\u4ee3\u7801\u53ef\u80fd\u662f\u4e0b\u9762\u8fd9\u6837\uff1a def user(request): # data = json.loads(request.body) data = { 'age': '24f', 'sex': 'f' } name = data.get('name') age = data.get('age', 20) sex = dage.get('sex') if name is None or len(name) == 0: return Response('\u5fc5\u987b\u63d0\u4f9b name', status=400) try: age = int(age) except ValueError as e: return Response('age \u683c\u5f0f\u9519\u8bef', status=400) if sex is not None and sex not in ('f', 'm'): return Response('sex \u683c\u5f0f\u9519\u8bef', status=400) user_info = { 'name': name, 'age': age, 'sex': sex, } ... \u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\u603b\u7684\u6765\u8bf4\u6709\u51e0\u4e2a\u95ee\u9898\uff1a \u67af\u71e5\u65e0\u5473\u548c\u91cd\u590d\u6027\u4ee3\u7801\uff0c\u4e0d\u65ad\u7684\u53d6\u51fa\u6570\u636e\uff0c\u68c0\u67e5\u5b57\u6bb5\u662f\u5426\u7f3a\u5931\uff0c\u7c7b\u578b\u662f\u5426\u5408\u6cd5\u7b49\u7b49\u3002 \u4ece\u6570\u636e\u6821\u9a8c\u7684\u4ee3\u7801\u65e0\u6cd5\u8f7b\u6613\u770b\u51fa\u7528\u6237\u4fe1\u606f\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5373\u5b57\u6bb5\u662f\u4ec0\u4e48\u7c7b\u578b\u7684\uff0c\u662f\u5426\u53ef\u9009\uff0c\u9ed8\u8ba4\u503c\u662f\u4ec0\u4e48\u3002 \u4f7f\u7528 python-validator \u6821\u9a8c\u6570\u636e \u9996\u5148\u5b9a\u4e49\u4e00\u4e2a UserInfoValidator \u7c7b # validators.py from validator import Validator, StringField, IntegerField, EnumField class UserInfoValidator(Validator): name = StringField(max_length=50, required=True) age = IntegerField(min_value=1, max_value=120, default=20) sex = EnumField(choices=['f', 'm']) \u63a5\u4e0b\u6765\u4f7f\u7528 UserInfoValidator \u8fdb\u884c\u6570\u636e\u6821\u9a8c\uff0c from .validators import UserInfoValidator def user(request): # data = json.loads(request.body) data = { 'age': '24', 'sex': 'f' } v = UserInfoValidator(data) if not v.is_valid(): return Response({'msg': v.str_errors, 'code': 400}, status=400) user_info = v.validated_data ... v.str_errors \u662f\u4e00\u4e2a\u5b57\u6bb5\u540d - \u9519\u8bef\u4fe1\u606f\u7684 dict\uff0c\u4f8b\u5982\uff1a {'age': 'got a wrong type: str, expect integer', 'name': 'Field is required'} \u9519\u8bef\u4fe1\u606f\u89e3\u91ca\uff1a age \u7b49\u4e8e \"24\"\uff0c\u4e0d\u662f\u5408\u6cd5\u7684 int \u7c7b\u578b\u3002 name \u662f\u5fc5\u987b\u63d0\u4f9b\u7684\uff0c\u4e14\u6ca1\u6709\u6307\u5b9a\u9ed8\u8ba4\u503c\u3002 v.validated_data \u662f\u6821\u9a8c\u540e\u5408\u6cd5\u7684\u6570\u636e\uff0c\u4f8b\u5982\uff1a {'age': 24, 'name': u'Michael', 'sex': 'f'} \u4e0b\u9762\u662f\u4e00\u4e9b\u9519\u8bef\u6570\u636e\u7684\u4f8b\u5b50\uff1a data: {'age': 24, 'name': 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc', 'sex': 'f'} is_valid: False errors: {'name': 'string is too long, max-lenght is 50'} validated_data: None data: {'age': 24, 'name': 'Michael', 'sex': 'c'} is_valid: False errors: {'sex': \"'c' not in the choices\"} validated_data: None \u7ec6\u5fc3\u7684\u540c\u5b66\u53ef\u80fd\u53d1\u73b0\u4e86 IntegerField \u4e0d\u63a5\u53d7 \u201c\u6570\u5b57\u5b57\u7b26\u4e32\u201d\uff0c\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d age \u662f\u4e00\u4e2a IntegerField \uff0c\u5f62\u5982 '24' \u8fd9\u6837\u7684\u503c\u662f\u975e\u6cd5\u7684\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b IntegerField \u4e0d\u8981\u8fd9\u4e48\u4e25\u683c\uff0c '24' \u8fd9\u6837\u7684\u503c\u4e5f\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\uff0c\u90a3\u4e48\u53ef\u4ee5\u628a strict \u9009\u9879\u8bbe\u4e3a False \uff0c\u5982\uff1a age = IntegerField(min_value=1, max_value=120, default=20, strict=False) \u3002\u5f53 strict \u9009\u9879\u4e3a False \u65f6\uff0cpython-validator \u4f1a\u5c1d\u8bd5\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362\uff0c\u5047\u5982\u8f6c\u6362\u5931\u8d25\u5219\u4f1a\u62a5\u9519\u3002 \u63a5\u4e0b\u6765\u4f60\u53ef\u4ee5 \u67e5\u770b\u8fdb\u9636 \u4e86\u89e3 python-validator \u66f4\u591a\u7684\u7528\u6cd5\uff0c \u67e5\u770b\u5b57\u6bb5 API \u4e86\u89e3\u5b57\u6bb5\u7684\u8be6\u7ec6\u4fe1\u606f\u3002 \u6d4b\u8bd5 \u4f7f\u7528 tox \u548c pytest \u8fdb\u884c\u4ee3\u7801\u6d4b\u8bd5\u3002 \u63a8\u8350\u4f7f\u7528 pipenv \u6765\u7ba1\u7406\u9879\u76ee\u4f9d\u8d56\u3002 \u5047\u5982\u4f7f\u7528 pipenv\uff1a pipenv install (\u5b89\u88c5\u4f9d\u8d56\u5e93) pipenv run test \u5047\u5982\u4f7f\u7528 pip\uff1a pip install -r requirements.txt (\u5b89\u88c5\u4f9d\u8d56\u5e93) tox \u5176\u5b83 \u5982\u679c\u9047\u5230 BUG \u6216\u8005\u6709\u4efb\u4f55\u5efa\u8bae\uff0c\u6b22\u8fce\u63d0\u4ea4 issue \u6216\u8005 PR\u3002 \u5982\u679c\u5e0c\u671b\u8d21\u732e\u4ee3\u7801\uff0c\u8bf7\u5c3d\u91cf\u7f16\u5199\u6d4b\u8bd5\u7528\u4f8b\u5e76\u6d4b\u8bd5\u4f60\u7684\u4ee3\u7801\uff0c\u7136\u540e\u518d\u63d0\u4ea4 PR\u3002","title":"\u9996\u9875"},{"location":"#python-validator","text":"python-validator \u662f\u4e00\u4e2a\u7c7b\u4f3c\u4e8e Django ORM \u7684\u6570\u636e\u6821\u9a8c\u5e93\uff0c\u9002\u7528\u4e0e\u4efb\u4f55\u9700\u8981\u8fdb\u884c\u6570\u636e\u6821\u9a8c\u7684\u5e94\u7528\uff0c\u6bd4\u8f83\u5e38\u89c1\u7684\u662f Web \u540e\u7aef\u6821\u9a8c\u524d\u7aef\u7684\u8f93\u5165\u6570\u636e\u3002 \u6587\u6863","title":"python-validator"},{"location":"#_1","text":"\u652f\u6301 python2 \u548c python3\u3002 \u4f7f\u7528\u7c7b\u63cf\u8ff0\u6570\u636e\u7ed3\u6784\uff0c\u6570\u636e\u5b57\u6bb5\u4e00\u76ee\u4e86\u7136\u3002\u53e6\u5916\u4e5f\u652f\u6301\u4f7f\u7528\u5b57\u5178\u5b9a\u4e49\u6570\u636e\u7ed3\u6784\u3002 \u53ef\u4ee5\u81ea\u52a8\u751f\u6210\u7528\u4e8e\u6d4b\u8bd5\u7684 mocking data\u3002 \u53ef\u4ee5\u6253\u5370\u51fa\u6e05\u6670\u7684\u6570\u636e\u7ed3\u6784\u3002 \u6613\u4e8e\u6269\u5c55\u3002","title":"\u7279\u6027"},{"location":"#_2","text":"six IPy pytz[\u53ef\u9009\uff0c DatetimeField \u7684 tzinfo \u53c2\u6570\u9700\u8981\u4e00\u4e2a tzinfo \u5bf9\u8c61]","title":"\u4f9d\u8d56"},{"location":"#_3","text":"pip install python-validator","title":"\u5b89\u88c5"},{"location":"#_4","text":"\u5047\u8bbe\u73b0\u5728\u6b63\u5728\u5f00\u53d1\u4e00\u4e2a\u4e0a\u4f20\u7528\u6237\u4fe1\u606f\u7684\u63a5\u53e3 POST /api/user/ \uff0c\u7528\u6237\u4fe1\u606f\u5982\u4e0b\uff1a \u5b57\u6bb5 \u7c7b\u578b \u63cf\u8ff0 name String \u5fc5\u9009 age integer \u53ef\u9009\uff0c\u9ed8\u8ba4 20 sex String, 'f'\u8868\u793a\u5973, 'm'\u8868\u793a\u7537 \u53ef\u9009, \u9ed8\u8ba4 None \u539f\u59cb\u7684\u3001\u67af\u71e5\u65e0\u5473\u7684\u3001\u91cd\u590d\u6027\u52b3\u52a8\u7684\u6570\u636e\u6821\u9a8c\u4ee3\u7801\u53ef\u80fd\u662f\u4e0b\u9762\u8fd9\u6837\uff1a def user(request): # data = json.loads(request.body) data = { 'age': '24f', 'sex': 'f' } name = data.get('name') age = data.get('age', 20) sex = dage.get('sex') if name is None or len(name) == 0: return Response('\u5fc5\u987b\u63d0\u4f9b name', status=400) try: age = int(age) except ValueError as e: return Response('age \u683c\u5f0f\u9519\u8bef', status=400) if sex is not None and sex not in ('f', 'm'): return Response('sex \u683c\u5f0f\u9519\u8bef', status=400) user_info = { 'name': name, 'age': age, 'sex': sex, } ... \u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\u603b\u7684\u6765\u8bf4\u6709\u51e0\u4e2a\u95ee\u9898\uff1a \u67af\u71e5\u65e0\u5473\u548c\u91cd\u590d\u6027\u4ee3\u7801\uff0c\u4e0d\u65ad\u7684\u53d6\u51fa\u6570\u636e\uff0c\u68c0\u67e5\u5b57\u6bb5\u662f\u5426\u7f3a\u5931\uff0c\u7c7b\u578b\u662f\u5426\u5408\u6cd5\u7b49\u7b49\u3002 \u4ece\u6570\u636e\u6821\u9a8c\u7684\u4ee3\u7801\u65e0\u6cd5\u8f7b\u6613\u770b\u51fa\u7528\u6237\u4fe1\u606f\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5373\u5b57\u6bb5\u662f\u4ec0\u4e48\u7c7b\u578b\u7684\uff0c\u662f\u5426\u53ef\u9009\uff0c\u9ed8\u8ba4\u503c\u662f\u4ec0\u4e48\u3002 \u4f7f\u7528 python-validator \u6821\u9a8c\u6570\u636e \u9996\u5148\u5b9a\u4e49\u4e00\u4e2a UserInfoValidator \u7c7b # validators.py from validator import Validator, StringField, IntegerField, EnumField class UserInfoValidator(Validator): name = StringField(max_length=50, required=True) age = IntegerField(min_value=1, max_value=120, default=20) sex = EnumField(choices=['f', 'm']) \u63a5\u4e0b\u6765\u4f7f\u7528 UserInfoValidator \u8fdb\u884c\u6570\u636e\u6821\u9a8c\uff0c from .validators import UserInfoValidator def user(request): # data = json.loads(request.body) data = { 'age': '24', 'sex': 'f' } v = UserInfoValidator(data) if not v.is_valid(): return Response({'msg': v.str_errors, 'code': 400}, status=400) user_info = v.validated_data ... v.str_errors \u662f\u4e00\u4e2a\u5b57\u6bb5\u540d - \u9519\u8bef\u4fe1\u606f\u7684 dict\uff0c\u4f8b\u5982\uff1a {'age': 'got a wrong type: str, expect integer', 'name': 'Field is required'} \u9519\u8bef\u4fe1\u606f\u89e3\u91ca\uff1a age \u7b49\u4e8e \"24\"\uff0c\u4e0d\u662f\u5408\u6cd5\u7684 int \u7c7b\u578b\u3002 name \u662f\u5fc5\u987b\u63d0\u4f9b\u7684\uff0c\u4e14\u6ca1\u6709\u6307\u5b9a\u9ed8\u8ba4\u503c\u3002 v.validated_data \u662f\u6821\u9a8c\u540e\u5408\u6cd5\u7684\u6570\u636e\uff0c\u4f8b\u5982\uff1a {'age': 24, 'name': u'Michael', 'sex': 'f'} \u4e0b\u9762\u662f\u4e00\u4e9b\u9519\u8bef\u6570\u636e\u7684\u4f8b\u5b50\uff1a data: {'age': 24, 'name': 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc', 'sex': 'f'} is_valid: False errors: {'name': 'string is too long, max-lenght is 50'} validated_data: None data: {'age': 24, 'name': 'Michael', 'sex': 'c'} is_valid: False errors: {'sex': \"'c' not in the choices\"} validated_data: None \u7ec6\u5fc3\u7684\u540c\u5b66\u53ef\u80fd\u53d1\u73b0\u4e86 IntegerField \u4e0d\u63a5\u53d7 \u201c\u6570\u5b57\u5b57\u7b26\u4e32\u201d\uff0c\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d age \u662f\u4e00\u4e2a IntegerField \uff0c\u5f62\u5982 '24' \u8fd9\u6837\u7684\u503c\u662f\u975e\u6cd5\u7684\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b IntegerField \u4e0d\u8981\u8fd9\u4e48\u4e25\u683c\uff0c '24' \u8fd9\u6837\u7684\u503c\u4e5f\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\uff0c\u90a3\u4e48\u53ef\u4ee5\u628a strict \u9009\u9879\u8bbe\u4e3a False \uff0c\u5982\uff1a age = IntegerField(min_value=1, max_value=120, default=20, strict=False) \u3002\u5f53 strict \u9009\u9879\u4e3a False \u65f6\uff0cpython-validator \u4f1a\u5c1d\u8bd5\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362\uff0c\u5047\u5982\u8f6c\u6362\u5931\u8d25\u5219\u4f1a\u62a5\u9519\u3002 \u63a5\u4e0b\u6765\u4f60\u53ef\u4ee5 \u67e5\u770b\u8fdb\u9636 \u4e86\u89e3 python-validator \u66f4\u591a\u7684\u7528\u6cd5\uff0c \u67e5\u770b\u5b57\u6bb5 API \u4e86\u89e3\u5b57\u6bb5\u7684\u8be6\u7ec6\u4fe1\u606f\u3002","title":"\u5feb\u901f\u5165\u95e8"},{"location":"#_5","text":"\u4f7f\u7528 tox \u548c pytest \u8fdb\u884c\u4ee3\u7801\u6d4b\u8bd5\u3002 \u63a8\u8350\u4f7f\u7528 pipenv \u6765\u7ba1\u7406\u9879\u76ee\u4f9d\u8d56\u3002 \u5047\u5982\u4f7f\u7528 pipenv\uff1a pipenv install (\u5b89\u88c5\u4f9d\u8d56\u5e93) pipenv run test \u5047\u5982\u4f7f\u7528 pip\uff1a pip install -r requirements.txt (\u5b89\u88c5\u4f9d\u8d56\u5e93) tox","title":"\u6d4b\u8bd5"},{"location":"#_6","text":"\u5982\u679c\u9047\u5230 BUG \u6216\u8005\u6709\u4efb\u4f55\u5efa\u8bae\uff0c\u6b22\u8fce\u63d0\u4ea4 issue \u6216\u8005 PR\u3002 \u5982\u679c\u5e0c\u671b\u8d21\u732e\u4ee3\u7801\uff0c\u8bf7\u5c3d\u91cf\u7f16\u5199\u6d4b\u8bd5\u7528\u4f8b\u5e76\u6d4b\u8bd5\u4f60\u7684\u4ee3\u7801\uff0c\u7136\u540e\u518d\u63d0\u4ea4 PR\u3002","title":"\u5176\u5b83"},{"location":"advanced/","text":"\u8fdb\u9636 python-validator \u4e3b\u8981\u5305\u542b Validator \u548c XXXField \u4e24\u90e8\u5206\uff0c Validator \u7c7b\u4f3c\u4e8e Django \u4e2d\u7684 Model\uff0c\u7528\u4e8e\u63cf\u8ff0\u6570\u636e\u7ed3\u6784\uff0c\u5176\u4e2d\u7684 XXXField \u63cf\u8ff0\u4e86\u5b57\u6bb5\u7684\u7c7b\u578b\u548c\u7ea6\u675f\u5e76\u8d1f\u8d23\u6821\u9a8c\u5bf9\u5e94\u7684\u6570\u636e\u3002 \u5b9a\u4e49 Validator \u76f4\u63a5\u7ee7\u627f Validator \u7c7b\u5e76\u5217\u51fa\u5305\u542b\u7684\u5b57\u6bb5 from validator import Validator, StringField, IntegerField, EnumField class UserInfoValidator(Validator): name = StringField(max_length=50, required=True) age = IntegerField(min_value=1, max_value=120, default=20) sex = EnumField(choices=['f', 'm']) \u4e0a\u9762\u7684\u4ee3\u7801\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6821\u9a8c\u7528\u6237\u4fe1\u606f\u7684 Validator : name \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6700\u5927\u957f\u5ea6\u4e3a 50 \u4e2a\u5b57\u8282\uff0c\u5e76\u4e14\u5fc5\u987b\u63d0\u4f9b\u4e0d\u80fd\u7f3a\u5931\u3002\u6ce8\u610f\u8fd9\u91cc\u7684\u957f\u5ea6\u6307\u7684\u662f\u5b57\u8282\uff0c\u800c\u4e0d\u662f\u5b57\u7b26\u3002 age \u662f\u4e00\u4e2a\u6574\u5f62\uff0c\u6700\u5c0f\u503c 1\uff0c\u6700\u5927\u503c 120\uff0c\u975e\u5fc5\u987b\uff0c\u9ed8\u8ba4\u503c 20 sex \u662f\u4e00\u4e2a\u679a\u4e3e\u7c7b\u578b\uff0c\u53ef\u9009\u503c\uff1a['f', 'm']\uff0c\u975e\u5fc5\u987b\u3002 \u5f53 required \u4e3a True \u65f6\uff0c\u8be5\u5b57\u6bb5\u5fc5\u987b\u63d0\u4f9b\uff0c\u9664\u975e\u663e\u5f0f\u6307\u5b9a default \u503c\u3002\u5982\u679c required \u4e3a True \u4e14\u6ca1\u6709\u6307\u5b9a default \u503c\uff0c\u5f53\u5b57\u6bb5\u4e0d\u5b58\u5728\u65f6\u5c06\u4f1a\u53d1\u751f\u5f02\u5e38 FieldValidationError \u3002\u4ee5\u4e0a\u9762\u7684 UserInfoValidator \u4e3a\u4f8b\uff0c\u4e0b\u9762\u7684\u6570\u636e\u5c06\u4f1a\u53d1\u751f\u5f02\u5e38\uff1a data = { # \u7f3a\u5c11 name \u5b57\u6bb5 'age': 20, 'sex': 'f' } python-validator \u8fd8\u652f\u6301 \u901a\u8fc7\u6570\u636e\u7ed3\u6784\u5b57\u5178\u521b\u5efa Validator \u3002 \u5173\u4e8e\u5b57\u6bb5\u53c2\u6570\u8bf7\u53c2\u8003 \u5b57\u6bb5 API \u3002 \u6821\u9a8c\u6570\u636e \u4f7f\u7528 is_valid() \u6821\u9a8c\u6570\u636e\uff0c\u6570\u636e\u5408\u6cd5\u8be5\u65b9\u6cd5\u8fd4\u56de True \uff0c\u5426\u5219\u8fd4\u56de False \u3002 data = { 'name:'Bob', 'age': 30, 'sex': 'm' } v = UserInfoValidator(data) print(v.is_valid()) # \u6821\u9a8c\u6570\u636e print(v.validated_data) # \u83b7\u53d6\u6821\u9a8c\u8fc7\u7684\u6570\u636e \u5982\u679c\u6570\u636e\u4e0d\u5408\u6cd5\uff0c\u90a3\u4e48 v.validated_data \u662f None\u3002 is_valid() \u5176\u5b9e\u8fd8\u63a5\u53d7\u4e00\u4e2a\u53ef\u9009\u7684\u53c2\u6570 raise_error \uff0c\u8be5\u53c2\u6570\u9ed8\u8ba4\u4e3a False \uff0c \u5982\u679c raise_error \u4e3a True \uff0c\u90a3\u4e48\u5f53\u6570\u636e\u975e\u6cd5\u65f6\uff0c is_valid() \u4f1a\u89e6\u53d1\u5f02\u5e38 ValidationError \uff0c\u800c\u4e0d\u662f\u8fd4\u56de False \u3002 \u9519\u8bef\u4fe1\u606f \u9519\u8bef\u4fe1\u606f\u4fdd\u5b58\u5728\u5b9e\u4f8b\u5c5e\u6027 errors \u4e2d\uff0c errors \u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u5305\u542b\u4e86\u6bcf\u4e2a\u9519\u8bef\u5b57\u6bb5\u7684\u9519\u8bef\u4fe1\u606f\uff0c\u4f8b\u5982\uff1a # data { 'age': '24', 'sex': 'f' } # v.errors { 'age': <FieldValidationError: got a wrong type: str, expect integer>, 'name': <FieldRequiredError: Field is required> } str_errors \u5c5e\u6027\u662f\u683c\u5f0f\u5316\u4e4b\u540e\u7684\u9519\u8bef\u4fe1\u606f\uff0c\u4f8b\u5982\uff1a { 'age': 'got a wrong type: str, expect integer', 'name': 'Field is required' } \u81ea\u5b9a\u4e49\u5b57\u6bb5\u7ea7\u7684\u6821\u9a8c\u65b9\u6cd5 Validator \u5728\u6821\u9a8c\u6570\u636e\u65f6\u4f1a\u81ea\u52a8\u8c03\u7528\u5f62\u5982 validate_xxx \u7684\u65b9\u6cd5\u6821\u9a8c\u5b57\u6bb5\u6570\u636e\u3002 validate_xxx \u65b9\u6cd5\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570 value \uff08\u5df2\u7ecf\u6821\u9a8c\u8fc7\u7684\u503c\uff09\uff0c\u65e0\u9700\u8fd4\u56de\u4efb\u4f55\u503c\u3002\u5982\u679c\u6570\u636e\u975e\u6cd5\uff0c\u89e6\u53d1 FieldValidationError \u5f02\u5e38\u5373\u53ef\u3002 \u5c06 xxx \u66ff\u6362\u4e3a\u5b57\u6bb5\u540d \u4ee3\u7801\u793a\u4f8b\uff1a from validator import Validator, StringField, IntegerField, EnumField, FieldValidationError class UserInfoValidator(Validator): name = StringField(max_length=50, required=True) age = IntegerField(min_value=1, max_value=120, default=20) sex = EnumField(choices=['f', 'm']) def validate_name(self, value): if value == 'foo': raise FieldValidationError('\"foo\" is invalid') \u6ce8\u610f\uff1a\u4e0d\u5efa\u8bae\u5728 validate_xxx \u65b9\u6cd5\u4e2d\u4fee\u6539 value \u81ea\u5b9a\u4e49\u5168\u5c40\u7684\u6821\u9a8c\u65b9\u6cd5 \u5f53\u6821\u9a8c\u5b8c\u6240\u6709\u5b57\u6bb5\u7684\u6570\u636e\u540e\uff0c Validator \u4f1a\u8c03\u7528 validate \u65b9\u6cd5\u6821\u9a8c\u5168\u5c40\u6570\u636e\uff0c\u6b64\u65f6\u7684\u5168\u5c40\u6570\u636e\u662f\u4e00\u4e2a\u5df2\u7ecf\u6821\u9a8c\u8fc7\u7684 dict\u3002\u9ed8\u8ba4\u7684 validate \u65b9\u6cd5\u76f4\u63a5\u8fd4\u56de\u6570\u636e\uff0c\u4f60\u53ef\u4ee5\u8986\u76d6\u5b83\u4ee5\u5b9e\u73b0\u81ea\u5df1\u7684\u6821\u9a8c\u903b\u8f91\u3002 \u4ee3\u7801\u793a\u4f8b\uff1a from validator import Validator, StringField, IntegerField, EnumField, ValidationError class UserInfoValidator(Validator): name = StringField(max_length=50, required=True) age = IntegerField(min_value=1, max_value=120, default=20) sex = EnumField(choices=['f', 'm']) def validate(self, data): if data['name'] == 'Bob' and data['age'] > 60: raise ValidationError('Bob is too old, he is younger than 60 age') # \u4f60\u4e5f\u53ef\u4ee5\u5728\u8fd9\u91cc\u4fee\u6539 data \u7684\u6570\u636e # data['foo'] = 'bar' return data \u751f\u6210\u6d4b\u8bd5\u6570\u636e \u7c7b\u65b9\u6cd5 mock_data() \u65b9\u6cd5\u53ef\u4ee5\u751f\u6210\u6d4b\u8bd5\u6570\u636e\uff0c\u8be5\u6570\u636e\u4e0d\u4fdd\u8bc1\u5b8c\u5168\u901a\u8fc7\u6821\u9a8c\uff0c\u7279\u522b\u662f\u901a\u8fc7 \u201c\u81ea\u5b9a\u4e49\u5b57\u6bb5\u7ea7\u7684\u6821\u9a8c\u65b9\u6cd5\u201d \u548c \u201c\u81ea\u5b9a\u4e49\u5168\u5c40\u7684\u6821\u9a8c\u65b9\u6cd5\u201d \u7684\u6821\u9a8c\u3002 \u4ee3\u7801\u793a\u4f8b\uff1a data = UserInfoValidator.mock_data() print(data) # {'age': 74, 'name': u'R7fuZaWOCPUVeYSQqaUvI', 'sex': 'f'} to_dict \u7c7b\u65b9\u6cd5 to_dict(cls) \u8fd4\u56de\u4e00\u4e2a\u63cf\u8ff0\u6570\u636e\u7ed3\u6784\u7684 dict\uff0c\u4f8b\u5982\uff1a { \"age\": { \"required\": false, \"default\": 20, \"max_value\": 120, \"min_value\": 1, \"strict\": true, \"validators\": [], \"type\": \"integer\" }, \"name\": { \"regex\": null, \"min_length\": 0, \"max_length\": 50, \"strict\": true, \"default\": \"__empty__\", \"validators\": [], \"required\": true, \"type\": \"string\" }, \"sex\": { \"default\": \"__empty__\", \"required\": false, \"choices\": [ \"f\", \"m\" ], \"strict\": true, \"validators\": [], \"type\": \"enum\" } } \u6570\u636e\u7ed3\u6784\u5b57\u5178 \u6570\u636e\u7ed3\u6784\u5b57\u5178\u7684 key \u662f\u5b57\u6bb5\u540d\u79f0\uff0cvalue \u662f\u63cf\u8ff0\u5b57\u6bb5\u7684\u7c7b\u578b\u548c\u521d\u59cb\u5316\u53c2\u6570\u7684\u5b57\u5178\u3002 \u4ee5\u4e0a\u9762 to_dict \u8fd4\u56de\u7684\u5b57\u5178\u4e3a\u4f8b\uff0c age \uff0c name \uff0c\u548c sex \u90fd\u662f\u5b57\u6bb5\u540d\u79f0\uff0c\u5176\u5bf9\u5e94\u7684\u503c\u5305\u542b\u4e86\u5b57\u6bb5\u7c7b\u578b\u548c\u521d\u59cb\u5316\u53c2\u6570\u3002 type \u8868\u793a\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u5b57\u6bb5\u7c7b\u578b\uff0c\u6bcf\u4e2a\u5b57\u6bb5\u7684\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u5b57\u6bb5\u7c7b\u578b\u4fdd\u5b58\u5728 FIELD_TYPE_NAME \u5c5e\u6027\u4e2d\u3002\u5269\u4f59\u7684\u53c2\u6570\u90fd\u662f\u5b57\u6bb5\u7684\u521d\u59cb\u5316\u53c2\u6570\u3002 \u5047\u5982 default \u7b49\u4e8e EMPTY_VALUE \uff0c\u4e3a\u4e86\u65b9\u4fbf\u5219\u4f7f\u7528 '__empty__' \u8868\u793a\u3002 \u7279\u6b8a\u5b57\u6bb5 ListField ListField \u662f\u590d\u5408\u6570\u636e\uff0c\u9700\u8981\u901a\u8fc7 field \u53c2\u6570\u6307\u660e\u5217\u8868\u9879\u7684\u7c7b\u578b\uff0c field \u53c2\u6570\u540c\u6837\u9002\u7528\u5b57\u5178\u6765\u8868\u793a\u3002\u4f8b\u5982\uff1a class V(Validator): cards = ListField(min_length=1, max_length=52, field=IntegerField(min_value=1, max_value=13)) print(json.dumps(V.to_dict(), indent=4)) # json output { \"cards\": { \"min_length\": 1, \"strict\": true, \"default\": \"__empty__\", \"required\": false, \"field\": { \"required\": false, \"default\": \"__empty__\", \"max_value\": 13, \"min_value\": 1, \"strict\": true, \"validators\": [], \"type\": \"integer\" }, \"max_length\": 52, \"validators\": [], \"type\": \"list\" } } DictField DictField \u662f\u590d\u5408\u6570\u636e\uff0c\u9700\u8981\u901a\u8fc7 validator \u53c2\u6570\u6821\u9a8c\u5b57\u5178\u5185\u90e8\u7684\u5404\u4e2a\u5b57\u6bb5\u3002 validator \u5c31\u662f Validator \u7684\u5b9e\u4f8b\uff0c\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7\u5b57\u5178\u6765\u63cf\u8ff0 validator \uff0c\u5c31\u50cf\u4e00\u4e2a validator \u5d4c\u5957\u4e86\u53e6\u5916\u4e00\u4e2a validator \u3002\u4f8b\u5982\uff1a data = { 'rectangle': { 'type': 'dict', 'validator': { 'width': { 'type': 'integer', 'default': '__empty__' }, 'height': { 'type': 'integer', } }, } } V = create_validator(data) print(json.dumps(V.to_dict(), indent=4)) # output { \"rectangle\": { \"default\": \"__empty__\", \"required\": false, \"strict\": true, \"validator\": { \"width\": { \"required\": false, \"default\": \"__empty__\", \"max_value\": null, \"min_value\": null, \"strict\": true, \"validators\": [], \"type\": \"integer\" }, \"height\": { \"required\": false, \"default\": \"__empty__\", \"max_value\": null, \"min_value\": null, \"strict\": true, \"validators\": [], \"type\": \"integer\" } }, \"validators\": [], \"type\": \"dict\" } } \u901a\u8fc7\u6570\u636e\u7ed3\u6784\u5b57\u5178\u521b\u5efa Validator create_validator(data_struct_dict, name=None) \u6839\u636e data_struct_dict \u521b\u5efa\u4e00\u4e2a Validator \u5b9e\u4f8b\u3002 data_struct_dict \u662f\u4e00\u4e2a\u63cf\u8ff0\u6570\u636e\u7ed3\u6784\u7684\u5b57\u5178\uff0c\u7c7b\u4f3c\u4e8e to_dict \u8fd4\u56de\u7684\u5b57\u5178\u3002 \u793a\u4f8b\uff1a data = { 'name': { 'type': 'string', 'min_length': 10, 'max_length': 20, } } V = create_validator(data)","title":"\u8fdb\u9636\u7528\u6cd5"},{"location":"advanced/#_1","text":"python-validator \u4e3b\u8981\u5305\u542b Validator \u548c XXXField \u4e24\u90e8\u5206\uff0c Validator \u7c7b\u4f3c\u4e8e Django \u4e2d\u7684 Model\uff0c\u7528\u4e8e\u63cf\u8ff0\u6570\u636e\u7ed3\u6784\uff0c\u5176\u4e2d\u7684 XXXField \u63cf\u8ff0\u4e86\u5b57\u6bb5\u7684\u7c7b\u578b\u548c\u7ea6\u675f\u5e76\u8d1f\u8d23\u6821\u9a8c\u5bf9\u5e94\u7684\u6570\u636e\u3002","title":"\u8fdb\u9636"},{"location":"advanced/#validator","text":"\u76f4\u63a5\u7ee7\u627f Validator \u7c7b\u5e76\u5217\u51fa\u5305\u542b\u7684\u5b57\u6bb5 from validator import Validator, StringField, IntegerField, EnumField class UserInfoValidator(Validator): name = StringField(max_length=50, required=True) age = IntegerField(min_value=1, max_value=120, default=20) sex = EnumField(choices=['f', 'm']) \u4e0a\u9762\u7684\u4ee3\u7801\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6821\u9a8c\u7528\u6237\u4fe1\u606f\u7684 Validator : name \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6700\u5927\u957f\u5ea6\u4e3a 50 \u4e2a\u5b57\u8282\uff0c\u5e76\u4e14\u5fc5\u987b\u63d0\u4f9b\u4e0d\u80fd\u7f3a\u5931\u3002\u6ce8\u610f\u8fd9\u91cc\u7684\u957f\u5ea6\u6307\u7684\u662f\u5b57\u8282\uff0c\u800c\u4e0d\u662f\u5b57\u7b26\u3002 age \u662f\u4e00\u4e2a\u6574\u5f62\uff0c\u6700\u5c0f\u503c 1\uff0c\u6700\u5927\u503c 120\uff0c\u975e\u5fc5\u987b\uff0c\u9ed8\u8ba4\u503c 20 sex \u662f\u4e00\u4e2a\u679a\u4e3e\u7c7b\u578b\uff0c\u53ef\u9009\u503c\uff1a['f', 'm']\uff0c\u975e\u5fc5\u987b\u3002 \u5f53 required \u4e3a True \u65f6\uff0c\u8be5\u5b57\u6bb5\u5fc5\u987b\u63d0\u4f9b\uff0c\u9664\u975e\u663e\u5f0f\u6307\u5b9a default \u503c\u3002\u5982\u679c required \u4e3a True \u4e14\u6ca1\u6709\u6307\u5b9a default \u503c\uff0c\u5f53\u5b57\u6bb5\u4e0d\u5b58\u5728\u65f6\u5c06\u4f1a\u53d1\u751f\u5f02\u5e38 FieldValidationError \u3002\u4ee5\u4e0a\u9762\u7684 UserInfoValidator \u4e3a\u4f8b\uff0c\u4e0b\u9762\u7684\u6570\u636e\u5c06\u4f1a\u53d1\u751f\u5f02\u5e38\uff1a data = { # \u7f3a\u5c11 name \u5b57\u6bb5 'age': 20, 'sex': 'f' } python-validator \u8fd8\u652f\u6301 \u901a\u8fc7\u6570\u636e\u7ed3\u6784\u5b57\u5178\u521b\u5efa Validator \u3002 \u5173\u4e8e\u5b57\u6bb5\u53c2\u6570\u8bf7\u53c2\u8003 \u5b57\u6bb5 API \u3002","title":"\u5b9a\u4e49 Validator"},{"location":"advanced/#_2","text":"\u4f7f\u7528 is_valid() \u6821\u9a8c\u6570\u636e\uff0c\u6570\u636e\u5408\u6cd5\u8be5\u65b9\u6cd5\u8fd4\u56de True \uff0c\u5426\u5219\u8fd4\u56de False \u3002 data = { 'name:'Bob', 'age': 30, 'sex': 'm' } v = UserInfoValidator(data) print(v.is_valid()) # \u6821\u9a8c\u6570\u636e print(v.validated_data) # \u83b7\u53d6\u6821\u9a8c\u8fc7\u7684\u6570\u636e \u5982\u679c\u6570\u636e\u4e0d\u5408\u6cd5\uff0c\u90a3\u4e48 v.validated_data \u662f None\u3002 is_valid() \u5176\u5b9e\u8fd8\u63a5\u53d7\u4e00\u4e2a\u53ef\u9009\u7684\u53c2\u6570 raise_error \uff0c\u8be5\u53c2\u6570\u9ed8\u8ba4\u4e3a False \uff0c \u5982\u679c raise_error \u4e3a True \uff0c\u90a3\u4e48\u5f53\u6570\u636e\u975e\u6cd5\u65f6\uff0c is_valid() \u4f1a\u89e6\u53d1\u5f02\u5e38 ValidationError \uff0c\u800c\u4e0d\u662f\u8fd4\u56de False \u3002","title":"\u6821\u9a8c\u6570\u636e"},{"location":"advanced/#_3","text":"\u9519\u8bef\u4fe1\u606f\u4fdd\u5b58\u5728\u5b9e\u4f8b\u5c5e\u6027 errors \u4e2d\uff0c errors \u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u5305\u542b\u4e86\u6bcf\u4e2a\u9519\u8bef\u5b57\u6bb5\u7684\u9519\u8bef\u4fe1\u606f\uff0c\u4f8b\u5982\uff1a # data { 'age': '24', 'sex': 'f' } # v.errors { 'age': <FieldValidationError: got a wrong type: str, expect integer>, 'name': <FieldRequiredError: Field is required> } str_errors \u5c5e\u6027\u662f\u683c\u5f0f\u5316\u4e4b\u540e\u7684\u9519\u8bef\u4fe1\u606f\uff0c\u4f8b\u5982\uff1a { 'age': 'got a wrong type: str, expect integer', 'name': 'Field is required' }","title":"\u9519\u8bef\u4fe1\u606f"},{"location":"advanced/#_4","text":"Validator \u5728\u6821\u9a8c\u6570\u636e\u65f6\u4f1a\u81ea\u52a8\u8c03\u7528\u5f62\u5982 validate_xxx \u7684\u65b9\u6cd5\u6821\u9a8c\u5b57\u6bb5\u6570\u636e\u3002 validate_xxx \u65b9\u6cd5\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570 value \uff08\u5df2\u7ecf\u6821\u9a8c\u8fc7\u7684\u503c\uff09\uff0c\u65e0\u9700\u8fd4\u56de\u4efb\u4f55\u503c\u3002\u5982\u679c\u6570\u636e\u975e\u6cd5\uff0c\u89e6\u53d1 FieldValidationError \u5f02\u5e38\u5373\u53ef\u3002 \u5c06 xxx \u66ff\u6362\u4e3a\u5b57\u6bb5\u540d \u4ee3\u7801\u793a\u4f8b\uff1a from validator import Validator, StringField, IntegerField, EnumField, FieldValidationError class UserInfoValidator(Validator): name = StringField(max_length=50, required=True) age = IntegerField(min_value=1, max_value=120, default=20) sex = EnumField(choices=['f', 'm']) def validate_name(self, value): if value == 'foo': raise FieldValidationError('\"foo\" is invalid') \u6ce8\u610f\uff1a\u4e0d\u5efa\u8bae\u5728 validate_xxx \u65b9\u6cd5\u4e2d\u4fee\u6539 value","title":"\u81ea\u5b9a\u4e49\u5b57\u6bb5\u7ea7\u7684\u6821\u9a8c\u65b9\u6cd5"},{"location":"advanced/#_5","text":"\u5f53\u6821\u9a8c\u5b8c\u6240\u6709\u5b57\u6bb5\u7684\u6570\u636e\u540e\uff0c Validator \u4f1a\u8c03\u7528 validate \u65b9\u6cd5\u6821\u9a8c\u5168\u5c40\u6570\u636e\uff0c\u6b64\u65f6\u7684\u5168\u5c40\u6570\u636e\u662f\u4e00\u4e2a\u5df2\u7ecf\u6821\u9a8c\u8fc7\u7684 dict\u3002\u9ed8\u8ba4\u7684 validate \u65b9\u6cd5\u76f4\u63a5\u8fd4\u56de\u6570\u636e\uff0c\u4f60\u53ef\u4ee5\u8986\u76d6\u5b83\u4ee5\u5b9e\u73b0\u81ea\u5df1\u7684\u6821\u9a8c\u903b\u8f91\u3002 \u4ee3\u7801\u793a\u4f8b\uff1a from validator import Validator, StringField, IntegerField, EnumField, ValidationError class UserInfoValidator(Validator): name = StringField(max_length=50, required=True) age = IntegerField(min_value=1, max_value=120, default=20) sex = EnumField(choices=['f', 'm']) def validate(self, data): if data['name'] == 'Bob' and data['age'] > 60: raise ValidationError('Bob is too old, he is younger than 60 age') # \u4f60\u4e5f\u53ef\u4ee5\u5728\u8fd9\u91cc\u4fee\u6539 data \u7684\u6570\u636e # data['foo'] = 'bar' return data","title":"\u81ea\u5b9a\u4e49\u5168\u5c40\u7684\u6821\u9a8c\u65b9\u6cd5"},{"location":"advanced/#_6","text":"\u7c7b\u65b9\u6cd5 mock_data() \u65b9\u6cd5\u53ef\u4ee5\u751f\u6210\u6d4b\u8bd5\u6570\u636e\uff0c\u8be5\u6570\u636e\u4e0d\u4fdd\u8bc1\u5b8c\u5168\u901a\u8fc7\u6821\u9a8c\uff0c\u7279\u522b\u662f\u901a\u8fc7 \u201c\u81ea\u5b9a\u4e49\u5b57\u6bb5\u7ea7\u7684\u6821\u9a8c\u65b9\u6cd5\u201d \u548c \u201c\u81ea\u5b9a\u4e49\u5168\u5c40\u7684\u6821\u9a8c\u65b9\u6cd5\u201d \u7684\u6821\u9a8c\u3002 \u4ee3\u7801\u793a\u4f8b\uff1a data = UserInfoValidator.mock_data() print(data) # {'age': 74, 'name': u'R7fuZaWOCPUVeYSQqaUvI', 'sex': 'f'}","title":"\u751f\u6210\u6d4b\u8bd5\u6570\u636e"},{"location":"advanced/#to_dict","text":"\u7c7b\u65b9\u6cd5 to_dict(cls) \u8fd4\u56de\u4e00\u4e2a\u63cf\u8ff0\u6570\u636e\u7ed3\u6784\u7684 dict\uff0c\u4f8b\u5982\uff1a { \"age\": { \"required\": false, \"default\": 20, \"max_value\": 120, \"min_value\": 1, \"strict\": true, \"validators\": [], \"type\": \"integer\" }, \"name\": { \"regex\": null, \"min_length\": 0, \"max_length\": 50, \"strict\": true, \"default\": \"__empty__\", \"validators\": [], \"required\": true, \"type\": \"string\" }, \"sex\": { \"default\": \"__empty__\", \"required\": false, \"choices\": [ \"f\", \"m\" ], \"strict\": true, \"validators\": [], \"type\": \"enum\" } }","title":"to_dict"},{"location":"advanced/#_7","text":"\u6570\u636e\u7ed3\u6784\u5b57\u5178\u7684 key \u662f\u5b57\u6bb5\u540d\u79f0\uff0cvalue \u662f\u63cf\u8ff0\u5b57\u6bb5\u7684\u7c7b\u578b\u548c\u521d\u59cb\u5316\u53c2\u6570\u7684\u5b57\u5178\u3002 \u4ee5\u4e0a\u9762 to_dict \u8fd4\u56de\u7684\u5b57\u5178\u4e3a\u4f8b\uff0c age \uff0c name \uff0c\u548c sex \u90fd\u662f\u5b57\u6bb5\u540d\u79f0\uff0c\u5176\u5bf9\u5e94\u7684\u503c\u5305\u542b\u4e86\u5b57\u6bb5\u7c7b\u578b\u548c\u521d\u59cb\u5316\u53c2\u6570\u3002 type \u8868\u793a\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u5b57\u6bb5\u7c7b\u578b\uff0c\u6bcf\u4e2a\u5b57\u6bb5\u7684\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u5b57\u6bb5\u7c7b\u578b\u4fdd\u5b58\u5728 FIELD_TYPE_NAME \u5c5e\u6027\u4e2d\u3002\u5269\u4f59\u7684\u53c2\u6570\u90fd\u662f\u5b57\u6bb5\u7684\u521d\u59cb\u5316\u53c2\u6570\u3002 \u5047\u5982 default \u7b49\u4e8e EMPTY_VALUE \uff0c\u4e3a\u4e86\u65b9\u4fbf\u5219\u4f7f\u7528 '__empty__' \u8868\u793a\u3002","title":"\u6570\u636e\u7ed3\u6784\u5b57\u5178"},{"location":"advanced/#_8","text":"ListField ListField \u662f\u590d\u5408\u6570\u636e\uff0c\u9700\u8981\u901a\u8fc7 field \u53c2\u6570\u6307\u660e\u5217\u8868\u9879\u7684\u7c7b\u578b\uff0c field \u53c2\u6570\u540c\u6837\u9002\u7528\u5b57\u5178\u6765\u8868\u793a\u3002\u4f8b\u5982\uff1a class V(Validator): cards = ListField(min_length=1, max_length=52, field=IntegerField(min_value=1, max_value=13)) print(json.dumps(V.to_dict(), indent=4)) # json output { \"cards\": { \"min_length\": 1, \"strict\": true, \"default\": \"__empty__\", \"required\": false, \"field\": { \"required\": false, \"default\": \"__empty__\", \"max_value\": 13, \"min_value\": 1, \"strict\": true, \"validators\": [], \"type\": \"integer\" }, \"max_length\": 52, \"validators\": [], \"type\": \"list\" } } DictField DictField \u662f\u590d\u5408\u6570\u636e\uff0c\u9700\u8981\u901a\u8fc7 validator \u53c2\u6570\u6821\u9a8c\u5b57\u5178\u5185\u90e8\u7684\u5404\u4e2a\u5b57\u6bb5\u3002 validator \u5c31\u662f Validator \u7684\u5b9e\u4f8b\uff0c\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7\u5b57\u5178\u6765\u63cf\u8ff0 validator \uff0c\u5c31\u50cf\u4e00\u4e2a validator \u5d4c\u5957\u4e86\u53e6\u5916\u4e00\u4e2a validator \u3002\u4f8b\u5982\uff1a data = { 'rectangle': { 'type': 'dict', 'validator': { 'width': { 'type': 'integer', 'default': '__empty__' }, 'height': { 'type': 'integer', } }, } } V = create_validator(data) print(json.dumps(V.to_dict(), indent=4)) # output { \"rectangle\": { \"default\": \"__empty__\", \"required\": false, \"strict\": true, \"validator\": { \"width\": { \"required\": false, \"default\": \"__empty__\", \"max_value\": null, \"min_value\": null, \"strict\": true, \"validators\": [], \"type\": \"integer\" }, \"height\": { \"required\": false, \"default\": \"__empty__\", \"max_value\": null, \"min_value\": null, \"strict\": true, \"validators\": [], \"type\": \"integer\" } }, \"validators\": [], \"type\": \"dict\" } }","title":"\u7279\u6b8a\u5b57\u6bb5"},{"location":"advanced/#validator_1","text":"create_validator(data_struct_dict, name=None) \u6839\u636e data_struct_dict \u521b\u5efa\u4e00\u4e2a Validator \u5b9e\u4f8b\u3002 data_struct_dict \u662f\u4e00\u4e2a\u63cf\u8ff0\u6570\u636e\u7ed3\u6784\u7684\u5b57\u5178\uff0c\u7c7b\u4f3c\u4e8e to_dict \u8fd4\u56de\u7684\u5b57\u5178\u3002 \u793a\u4f8b\uff1a data = { 'name': { 'type': 'string', 'min_length': 10, 'max_length': 20, } } V = create_validator(data)","title":"\u901a\u8fc7\u6570\u636e\u7ed3\u6784\u5b57\u5178\u521b\u5efa Validator"},{"location":"custom_field/","text":"\u81ea\u5b9a\u4e49\u5b57\u6bb5 \u5982\u679c\u8fd8\u6ca1\u6709\u770b\u8fc7 \u5b57\u6bb5 API \u7684\u8bdd\uff0c\u5efa\u8bae\u5148\u770b\u5b8c \u5b57\u6bb5 API \u518d\u770b\u672c\u7bc7\u6587\u6863\u3002 \u81ea\u5b9a\u4e49\u5b57\u6bb5\u6b65\u9aa4 \u5b9a\u4e49\u5b57\u6bb5\u7c7b\u578b\uff0c INTERNAL_TYPE = YOUR_CUSTOM_FIELD_TYPE \u5b9a\u4e49\u5b57\u6bb5\u7c7b\u578b\u540d\u79f0\uff0c FIELD_TYPE_NAME = YOUR_CUSTOM_FIELD_TYPE_NAME \u5b9a\u4e49 PARAMS \uff0c PARAMS \u662f\u4e00\u4e2a\u53c2\u6570\u540d\u79f0\u5217\u8868\uff0c\u5305\u542b __init__ \u65b9\u6cd5\u6240\u9700\u7684\u53c2\u6570\uff0c\u4f46\u662f\u4e0d\u5305\u542b\u4f20\u9012\u7ed9\u7236\u7c7b\u7684\u53c2\u6570\u3002\u5982\u679c __init__ \u65b9\u6cd5\u4e0d\u9700\u8981\u4efb\u4f55\u53c2\u6570\uff0c\u5219\u5c06 PARAMS \u8bbe\u4e3a\u7a7a\u5217\u8868\u3002 \u5982\u6709\u5fc5\u8981\u7684\u8bdd\uff0c\u8986\u76d6 __init__ \u65b9\u6cd5\uff0c\u8bb0\u5f97\u8c03\u7528\u7236\u7c7b\u7684 __init__ \u65b9\u6cd5\u3002 \u5b9e\u73b0 _validate(self, value) \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u7528\u4e8e\u9a8c\u8bc1\u6570\u636e\uff0c\u9a8c\u8bc1\u901a\u8fc7\u5219\u8fd4\u56de\u6570\u636e\uff0c\u9a8c\u8bc1\u5931\u8d25\u5219\u629b\u51fa\u5f02\u5e38 FieldValidationError \u3002\u6ce8\u610f\uff1a\u5982\u679c\u539f\u59cb\u6570\u636e\u662f\u53ef\u53d8\u7c7b\u578b\uff08\u5982 list\uff0cdict\uff09\uff0c\u5219\u6700\u597d\u8fd4\u56de\u539f\u59cb\u6570\u636e\u7684\u62f7\u8d1d\uff0c\u4ee5\u9632\u6b62\u7be1\u6539\u6570\u636e\u3002 \u5728 _validate \u65b9\u6cd5\u4e2d\uff0c\u53ef\u4ee5\u8c03\u7528 _validate_type(self, value) \u9a8c\u8bc1\u53c2\u6570\u7c7b\u578b\u3002 \u5b9e\u73b0 mock_data(self) \u65b9\u6cd5\uff0c\u8fd4\u56de\u7528\u4e8e\u6d4b\u8bd5\u7684\u5047\u6570\u636e\u3002 \u4f8b\u5b50 from validator import Validator, BaseField, FieldValidationError import random class AgeField(BaseField): INTERNAL_TYPE = int FIELD_TYPE_NAME = 'age' PARAMS = [] # \u7531\u4e8e\u6ca1\u6709\u8986\u76d6__init__\u65b9\u6cd5\uff0c\u6240\u4ee5 PARAMS \u8bbe\u4e3a\u7a7a\u5217\u8868 def _validate(self, value): # \u9996\u5148\u8c03\u7528_validate_type(value) \u6821\u9a8c\u6570\u636e\u7c7b\u578b value = self._validate_type(value) if value <= 0: raise FieldValidationError('\u5e74\u9f84\u4e0d\u80fd\u5c0f\u4e8e\u6216\u7b49\u4e8e 0') if value > 120: # \u5047\u8bbe\u6700\u5927\u5e74\u9f84\u662f 120 raise FieldValidationError('\u5e74\u9f84\u4e0d\u80fd\u8d85\u8fc7 120') # \u8fd4\u56de\u6821\u9a8c\u901a\u8fc7\u540e\u7684\u6570\u636e return value def mock_data(self): # \u968f\u673a\u751f\u6210\u4e00\u4e2a\u4ecb\u4e8e 1 ~ 120 \u7684\u5e74\u9f84 return random.randint(1, 120) \u5982\u679c\u60f3\u67e5\u770b\u66f4\u591a\u7684\u4f8b\u5b50\uff0c\u5efa\u8bae\u76f4\u63a5\u67e5\u770b python-validator \u7684\u6e90\u7801\u3002","title":"\u81ea\u5b9a\u4e49\u5b57\u6bb5"},{"location":"custom_field/#_1","text":"\u5982\u679c\u8fd8\u6ca1\u6709\u770b\u8fc7 \u5b57\u6bb5 API \u7684\u8bdd\uff0c\u5efa\u8bae\u5148\u770b\u5b8c \u5b57\u6bb5 API \u518d\u770b\u672c\u7bc7\u6587\u6863\u3002","title":"\u81ea\u5b9a\u4e49\u5b57\u6bb5"},{"location":"custom_field/#_2","text":"\u5b9a\u4e49\u5b57\u6bb5\u7c7b\u578b\uff0c INTERNAL_TYPE = YOUR_CUSTOM_FIELD_TYPE \u5b9a\u4e49\u5b57\u6bb5\u7c7b\u578b\u540d\u79f0\uff0c FIELD_TYPE_NAME = YOUR_CUSTOM_FIELD_TYPE_NAME \u5b9a\u4e49 PARAMS \uff0c PARAMS \u662f\u4e00\u4e2a\u53c2\u6570\u540d\u79f0\u5217\u8868\uff0c\u5305\u542b __init__ \u65b9\u6cd5\u6240\u9700\u7684\u53c2\u6570\uff0c\u4f46\u662f\u4e0d\u5305\u542b\u4f20\u9012\u7ed9\u7236\u7c7b\u7684\u53c2\u6570\u3002\u5982\u679c __init__ \u65b9\u6cd5\u4e0d\u9700\u8981\u4efb\u4f55\u53c2\u6570\uff0c\u5219\u5c06 PARAMS \u8bbe\u4e3a\u7a7a\u5217\u8868\u3002 \u5982\u6709\u5fc5\u8981\u7684\u8bdd\uff0c\u8986\u76d6 __init__ \u65b9\u6cd5\uff0c\u8bb0\u5f97\u8c03\u7528\u7236\u7c7b\u7684 __init__ \u65b9\u6cd5\u3002 \u5b9e\u73b0 _validate(self, value) \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u7528\u4e8e\u9a8c\u8bc1\u6570\u636e\uff0c\u9a8c\u8bc1\u901a\u8fc7\u5219\u8fd4\u56de\u6570\u636e\uff0c\u9a8c\u8bc1\u5931\u8d25\u5219\u629b\u51fa\u5f02\u5e38 FieldValidationError \u3002\u6ce8\u610f\uff1a\u5982\u679c\u539f\u59cb\u6570\u636e\u662f\u53ef\u53d8\u7c7b\u578b\uff08\u5982 list\uff0cdict\uff09\uff0c\u5219\u6700\u597d\u8fd4\u56de\u539f\u59cb\u6570\u636e\u7684\u62f7\u8d1d\uff0c\u4ee5\u9632\u6b62\u7be1\u6539\u6570\u636e\u3002 \u5728 _validate \u65b9\u6cd5\u4e2d\uff0c\u53ef\u4ee5\u8c03\u7528 _validate_type(self, value) \u9a8c\u8bc1\u53c2\u6570\u7c7b\u578b\u3002 \u5b9e\u73b0 mock_data(self) \u65b9\u6cd5\uff0c\u8fd4\u56de\u7528\u4e8e\u6d4b\u8bd5\u7684\u5047\u6570\u636e\u3002","title":"\u81ea\u5b9a\u4e49\u5b57\u6bb5\u6b65\u9aa4"},{"location":"custom_field/#_3","text":"from validator import Validator, BaseField, FieldValidationError import random class AgeField(BaseField): INTERNAL_TYPE = int FIELD_TYPE_NAME = 'age' PARAMS = [] # \u7531\u4e8e\u6ca1\u6709\u8986\u76d6__init__\u65b9\u6cd5\uff0c\u6240\u4ee5 PARAMS \u8bbe\u4e3a\u7a7a\u5217\u8868 def _validate(self, value): # \u9996\u5148\u8c03\u7528_validate_type(value) \u6821\u9a8c\u6570\u636e\u7c7b\u578b value = self._validate_type(value) if value <= 0: raise FieldValidationError('\u5e74\u9f84\u4e0d\u80fd\u5c0f\u4e8e\u6216\u7b49\u4e8e 0') if value > 120: # \u5047\u8bbe\u6700\u5927\u5e74\u9f84\u662f 120 raise FieldValidationError('\u5e74\u9f84\u4e0d\u80fd\u8d85\u8fc7 120') # \u8fd4\u56de\u6821\u9a8c\u901a\u8fc7\u540e\u7684\u6570\u636e return value def mock_data(self): # \u968f\u673a\u751f\u6210\u4e00\u4e2a\u4ecb\u4e8e 1 ~ 120 \u7684\u5e74\u9f84 return random.randint(1, 120) \u5982\u679c\u60f3\u67e5\u770b\u66f4\u591a\u7684\u4f8b\u5b50\uff0c\u5efa\u8bae\u76f4\u63a5\u67e5\u770b python-validator \u7684\u6e90\u7801\u3002","title":"\u4f8b\u5b50"},{"location":"exceptions/","text":"\u5f02\u5e38 BaseValidationError \u6240\u6709\u5f02\u5e38\u7684\u57fa\u7c7b\u3002 __init__(self, detail=None, code=None) detail \u9519\u8bef\u8be6\u60c5\uff0c\u53ef\u4ee5\u662f\u5b57\u7b26\u4e32\u6216\u8005 dict\u3002 code \u9519\u8bef\u4ee3\u7801\uff0c\u76ee\u524d\u672a\u4f7f\u7528\u5230\u3002 \u5b9e\u4f8b\u65b9\u6cd5 get_detail(self) \u8fd4\u56de\u9519\u8bef\u8be6\u60c5\u3002 \u7c7b\u5c5e\u6027 default_detail \u9ed8\u8ba4\u7684\u9519\u8bef\u8be6\u60c5\u3002\u5982\u679c __init__ \u7684 detail \u53c2\u6570\u4e3a None \uff0c\u5219\u5c06\u5176\u8bbe\u4e3a default_detail \u3002 default_code \u9ed8\u8ba4\u7684\u9519\u8bef\u4ee3\u7801\u3002\u5982\u679c __init__ \u7684 code \u53c2\u6570\u4e3a None \uff0c\u5219\u5c06\u5176\u8bbe\u4e3a default_code \u3002 FieldRequiredError \u7ee7\u627f\u81ea BaseValidationError\uff0c\u5f53\u5b57\u6bb5\u7f3a\u5931\u65f6\u89e6\u53d1\u8be5\u5f02\u5e38\u3002 default_detail = 'Field is required' default_code = 'error' ValidationError \u7ee7\u627f\u81ea BaseValidationError\uff0c\u5f53 Validator.validate() \u6216\u8005 Validator.is_valid(raise_error=True) \u6821\u9a8c\u6570\u636e\u5931\u8d25\u65f6\u89e6\u53d1\u8be5\u5f02\u5e38\u3002 default_detail = 'Validation error' default_code = 'error' FieldValidationError \u7ee7\u627f\u81ea BaseValidationError\uff0c\u5f53\u6821\u9a8c\u5b57\u6bb5\u6570\u636e\u5931\u8d25\u65f6\u89e6\u53d1\u8be5\u5f02\u5e38\u3002 default_detail = 'field Validation error' default_code = 'error'","title":"\u5f02\u5e38"},{"location":"exceptions/#_1","text":"","title":"\u5f02\u5e38"},{"location":"exceptions/#basevalidationerror","text":"\u6240\u6709\u5f02\u5e38\u7684\u57fa\u7c7b\u3002 __init__(self, detail=None, code=None) detail \u9519\u8bef\u8be6\u60c5\uff0c\u53ef\u4ee5\u662f\u5b57\u7b26\u4e32\u6216\u8005 dict\u3002 code \u9519\u8bef\u4ee3\u7801\uff0c\u76ee\u524d\u672a\u4f7f\u7528\u5230\u3002 \u5b9e\u4f8b\u65b9\u6cd5 get_detail(self) \u8fd4\u56de\u9519\u8bef\u8be6\u60c5\u3002 \u7c7b\u5c5e\u6027 default_detail \u9ed8\u8ba4\u7684\u9519\u8bef\u8be6\u60c5\u3002\u5982\u679c __init__ \u7684 detail \u53c2\u6570\u4e3a None \uff0c\u5219\u5c06\u5176\u8bbe\u4e3a default_detail \u3002 default_code \u9ed8\u8ba4\u7684\u9519\u8bef\u4ee3\u7801\u3002\u5982\u679c __init__ \u7684 code \u53c2\u6570\u4e3a None \uff0c\u5219\u5c06\u5176\u8bbe\u4e3a default_code \u3002","title":"BaseValidationError"},{"location":"exceptions/#fieldrequirederror","text":"\u7ee7\u627f\u81ea BaseValidationError\uff0c\u5f53\u5b57\u6bb5\u7f3a\u5931\u65f6\u89e6\u53d1\u8be5\u5f02\u5e38\u3002 default_detail = 'Field is required' default_code = 'error'","title":"FieldRequiredError"},{"location":"exceptions/#validationerror","text":"\u7ee7\u627f\u81ea BaseValidationError\uff0c\u5f53 Validator.validate() \u6216\u8005 Validator.is_valid(raise_error=True) \u6821\u9a8c\u6570\u636e\u5931\u8d25\u65f6\u89e6\u53d1\u8be5\u5f02\u5e38\u3002 default_detail = 'Validation error' default_code = 'error'","title":"ValidationError"},{"location":"exceptions/#fieldvalidationerror","text":"\u7ee7\u627f\u81ea BaseValidationError\uff0c\u5f53\u6821\u9a8c\u5b57\u6bb5\u6570\u636e\u5931\u8d25\u65f6\u89e6\u53d1\u8be5\u5f02\u5e38\u3002 default_detail = 'field Validation error' default_code = 'error'","title":"FieldValidationError"},{"location":"fields/","text":"\u5b57\u6bb5 API \u4e0b\u9762\u5c06\u8981\u4ecb\u7ecd python-validator \u4e2d\u6240\u6709\u7684\u5b57\u6bb5\u3002 \u6a21\u5757\u5c5e\u6027 FIELDS_NAME_MAP \u6240\u6709\u5b57\u6bb5\u540d\u79f0\u548c\u5b57\u6bb5\u7c7b\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u4f8b\u5982: { 'string': StringField, 'integer': IntegerField, ... } \u6a21\u5757\u65b9\u6cd5 create_field(field_info) \u6839\u636e field_info \u521b\u5efa\u4e00\u4e2a\u5b57\u6bb5\u5b9e\u4f8b\uff0c field_info \u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u5305\u542b\u4e86\u5b57\u6bb5\u7c7b\u578b\u53ca\u521d\u59cb\u5316\u53c2\u6570\uff0c\u4f8b\u5982 string_field.to_dict() \u7684\u8fd4\u56de\u503c\u3002 \u4e00\u822c\u4e0d\u4f1a\u76f4\u63a5\u4f7f\u7528\u5230\u8be5\u65b9\u6cd5\uff0c\u5982\u679c\u60f3\u8981\u901a\u8fc7\u6570\u636e\u7ed3\u6784\u5b57\u5178\u521b\u5efa Validator \uff0c\u8bf7\u67e5\u770b \u901a\u8fc7\u6570\u636e\u7ed3\u6784\u5b57\u5178\u521b\u5efa Validator \u3002 BaseField \u6240\u6709\u5b57\u6bb5\u7684\u7236\u7c7b\u3002 __init__(self, strict=True, default=EMPTY_VALUE, validators=None, required=False, **kwargs) strict bool \u7c7b\u578b\uff0c\u662f\u5426\u91c7\u7528\u4e25\u683c\u7c7b\u578b\u6821\u9a8c\u3002\u5f53 strict = True \u65f6\uff0c\u503c\u5fc5\u987b\u662f\u8be5\u5b57\u6bb5\u7c7b\u578b\u7684\u5b9e\u4f8b\uff0c\u5373 isinstance(value, INTERNAL_TYPE) \uff0c\u5426\u5219\u53d1\u751f\u5f02\u5e38 FieldValidationError('got a wrong type: {0}, expect {1}') \u3002 \u5f53 strict = False \u65f6\uff0c\u5982\u679c\u503c\u4e0d\u662f\u5b57\u6bb5\u7c7b\u578b\u7684\u5b9e\u4f8b\uff0c\u4f1a\u5c1d\u8bd5\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362\uff0c\u5047\u5982\u8f6c\u6362\u5931\u8d25\u53d1\u751f\u5f02\u5e38 FieldValidationError('type convertion is failed: {0} -> {1}') default \u5b57\u6bb5\u7684\u9ed8\u8ba4\u503c\u3002 default \u9ed8\u8ba4\u4e3a EMPTY_VALUE \uff0c EMPTY_VALUE \u662f python-validator \u5185\u90e8\u4f7f\u7528\u7684\u4e00\u4e2a\u7a7a\u503c\uff0c\u4ee5\u533a\u522b None\u3002\u5f53\u5f85\u6821\u9a8c\u6570\u636e\u4e2d\u7f3a\u5931\u8be5\u5b57\u6bb5\u65f6\uff0c\u4f7f\u7528 default \u3002 python-validator \u4f1a\u5bf9 default \u8fdb\u884c\u6821\u9a8c\uff08\u9664\u975e default \u7b49\u4e8e EMPTY_VALUE \u6216\u8005 None \uff09\uff0c\u6240\u4ee5\u8bf7\u63d0\u4f9b\u5408\u6cd5\u7684 default \u3002 required bool \u7c7b\u578b\uff0c\u5b57\u6bb5\u662f\u5426\u662f\u5fc5\u987b\u7684\u3002\u5982\u679c\u8be5\u5b57\u6bb5\u662f\u5fc5\u987b\u7684\u4e14\u6ca1\u6709\u6307\u5b9a\u9ed8\u8ba4\u503c\uff0c\u4f1a\u5bfc\u81f4\u5f02\u5e38 FieldRequiredError \u3002 validators \u5217\u8868\u7c7b\u578b\uff0c\u63d0\u4f9b\u4e00\u7ec4\u989d\u5916\u7684\u6821\u9a8c\u5668\u3002validator \u53ef\u4ee5\u662f\u51fd\u6570\u6216\u8005\u5176\u5b83\u53ef\u8c03\u7528\u7684\u5bf9\u8c61\uff0cvalidator \u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\uff0c\u5373\u5b57\u6bb5\u503c\u3002\u51fd\u6570\u7684\u8fd4\u56de\u503c\u65e0\u6548\uff0c\u56e0\u6b64\u65e0\u6cd5\u5b9e\u73b0\u7ea7\u8054\u6821\u9a8c\u7684\u6548\u679c\uff08 value | validate(value) | validate(value) \uff09\u3002\u4e0d\u8981\u5728\u51fd\u6570\u4e2d\u4fee\u6539\u5b57\u6bb5\u503c\u3002 kwargs \u76ee\u524d\u672a\u4f7f\u7528\u3002 \u7c7b\u5c5e\u6027 INTERNAL_TYPE \u5b57\u6bb5\u5185\u90e8\u7c7b\u578b\u3002\u53ef\u4ee5\u662f\u5355\u4e2a\u7c7b\u578b\u6216\u8005\u7c7b\u578b\u5217\u8868\uff0c\u4f8b\u5982 StringField \u7684 INTERNAL_TYPE \u7b49\u4e8e str \uff08in Python2\uff09\u6216\u8005 (str, unicode) \uff08in python3\uff09 FIELD_TYPE_NAME \u5b57\u6bb5\u7c7b\u578b\u540d\u5b57\u3002\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u7c7b\u578b\u540d\u5b57\uff0c\u4e3b\u8981\u662f\u4e3a\u4e86\u53ef\u8bfb\u6027\u548c\u65b9\u4fbf\u663e\u793a\u3002 PARAMS \u53c2\u6570\u540d\u79f0\u5217\u8868\u3002 PARAMS \u5305\u542b\u6240\u6709\u521d\u59cb\u5316\u65b9\u6cd5\u6240\u9700\u7684\u53c2\u6570\u540d\u79f0\u3002\u4f8b\u5982 BaseField \u7684 PARAMS \u7b49\u4e8e ['strict', 'default', 'validators', 'required'] \u65b9\u6cd5 validate(self, value) \u66b4\u9732\u7ed9\u5916\u90e8\u8c03\u7528\u7684\u6821\u9a8c\u6570\u636e\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u9996\u5148\u8c03\u7528 _validate() \u6821\u9a8c\u6570\u636e\uff0c\u63a5\u7740\u904d\u5386 validators \u6821\u9a8c\u6570\u636e\uff0c\u6700\u540e\u8fd4\u56de\u6821\u9a8c\u540e\u7684\u503c\u3002 _validate(self, value) \u79c1\u6709\u6821\u9a8c\u6570\u636e\u65b9\u6cd5\uff0c\u6821\u9a8c\u6210\u529f\u5e94\u8be5\u8fd4\u56de\u5408\u6cd5\u503c\uff0c\u5931\u8d25\u5219\u89e6\u53d1\u5f02\u5e38 FieldValidationError \u3002\u5b50\u7c7b\u5e94\u8be5\u8986\u76d6\u8be5\u65b9\u6cd5\u5b9e\u73b0\u81ea\u5df1\u7684\u6821\u9a8c\u903b\u8f91\u3002\u5982\u679c value \u662f\u53ef\u53d8\u7c7b\u578b\u7684\u6570\u636e\uff0c\u5efa\u8bae\u62f7\u8d1d\u4e00\u4efd value \uff0c\u9632\u6b62\u4fee\u6539\u6570\u636e\u5f71\u54cd\u5230\u539f\u59cb\u6570\u636e\u3002 _validate_type(self, value) \u6821\u9a8c\u6570\u636e\u7c7b\u578b\u3002 _validate \u53ef\u4ee5\u8c03\u7528\u8be5\u65b9\u6cd5\u6821\u9a8c\u6570\u636e\u7c7b\u578b\u3002\u6821\u9a8c\u7c7b\u578b\u7684\u903b\u8f91\u5982\u4e0b\uff1a \u5982\u679c value \u4e0d\u662f INTERNAL_TYPE \u7684\u5b9e\u4f8b\uff0c \u5982\u679c strict \u4e3a True \uff0c\u5219\u89e6\u53d1\u5f02\u5e38 FieldValidationError \u3002 \u5982\u679c strict \u4e3a False \uff0c\u5219\u5c1d\u8bd5\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362\u3002\u8f6c\u6362\u6210\u529f\u8fd4\u56de\u8f6c\u6362\u540e\u7684\u503c\uff0c\u8f6c\u6362\u5931\u8d25\u89e6\u53d1 FieldValidationError \u3002 \u5982\u679c value \u662f INTERNAL_TYPE \u7684\u5b9e\u4f8b\uff0c\u5219\u76f4\u63a5\u8fd4\u56de value _convert_type(self, value) \u8f6c\u6362\u6570\u636e\u7c7b\u578b\uff0c\u8fd4\u56de\u8f6c\u6362\u540e\u7684\u503c\u3002 is_required(self) \u8be5\u5b57\u6bb5\u662f\u5426\u5fc5\u987b\u3002 get_default(self) \u8fd4\u56de\u9ed8\u8ba4\u503c\u3002 to_presentation(self, value) \u5c06 value \u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u5f62\u5f0f\uff0c value \u5fc5\u987b\u662f\u7ecf\u8fc7\u6821\u9a8c\u5408\u6cd5\u7684\u503c\u3002 to_internal(self, value) \u5c06 value \u8f6c\u6362\u4e3a\u5185\u90e8\u5f62\u5f0f\uff0c value \u5fc5\u987b\u662f\u7ecf\u8fc7\u6821\u9a8c\u5408\u6cd5\u7684\u503c\u3002\u4e00\u822c\u76f4\u63a5\u8fd4\u56de value \u3002 to_dict(self) \u5c06\u5b57\u6bb5\u8f6c\u6362\u4e3a\u5b57\u5178\u5f62\u5f0f\uff0c\u5b57\u5178\u63cf\u8ff0\u4e86\u8be5\u5b57\u6bb5\u7684\u7c7b\u578b\u548c\u521d\u59cb\u5316\u53c2\u6570\u3002 from_dict(cls, params) \u4ece params \u521b\u5efa\u4e00\u4e2a\u5b57\u6bb5\u5b9e\u4f8b\u3002\u521b\u5efa\u5b57\u6bb5\u5b9e\u4f8b\u7684\u4ee3\u7801\u5c31\u4e00\u53e5 return cls(**params) \uff0c\u5982\u679c\u60f3\u8981\u5b9e\u73b0\u66f4\u591a\u81ea\u5b9a\u4e49\u7684\u521b\u5efa\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u8986\u76d6\u8be5\u65b9\u6cd5\u3002 mock_data(self) \u8fd4\u56de\u53ef\u7528\u4e8e\u6d4b\u8bd5\u7684\u968f\u673a\u503c\u3002 StringField \u5b57\u7b26\u4e32\u5b57\u6bb5\uff0c\u7ee7\u627f\u81ea BaseField \u3002 __init__(self, min_length=0, max_length=None, regex=None, **kwargs) min_length \u6700\u5c0f\u957f\u5ea6\uff0c\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u3002\u9ed8\u8ba4\u4e3a 0\uff0c\u5373\u5141\u8bb8\u7a7a\u5b57\u7b26\u4e32\u3002 max_length \u6700\u5927\u957f\u5ea6\uff0c\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u3002\u9ed8\u8ba4\u4e3a None\uff0c\u8868\u793a\u4e0d\u9650\u5236\u6700\u5927\u957f\u5ea6\u3002 regex \u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u6d4b\u8bd5\u5b57\u7b26\u4e32\u662f\u5426\u5339\u914d\u3002\u4f7f\u7528 re.match \u8fdb\u884c\u5339\u914d\u3002 regex \u53ef\u4ee5\u662f\u5b57\u7b26\u4e32\u6216\u8005\u7ecf\u8fc7 re.compile \u7684 _sre.SRE_Pattern \u5bf9\u8c61\u3002 kwargs \u5176\u5b83\u53c2\u6570\uff0c\u4f8b\u5982 BaseField \u6240\u9700\u7684\u53c2\u6570\u3002 \u7c7b\u5c5e\u6027 INTERNAL_TYPE in Python2: (str, unicode) in Python3: str FIELD_TYPE_NAME 'string' PARAMS ['min_length', 'max_length', 'regex'] \u65b9\u6cd5 mock_data(self) \u8fd4\u56de\u968f\u673a\u751f\u6210\u7684\u4e00\u6bb5\u5b57\u7b26\u4e32\u3002\u5b57\u7b26\u4e32\u957f\u5ea6\u662f\u4e00\u4e2a\u968f\u673a\u503c\uff0c\u4ecb\u4e8e min_length \u548c max_length \u4e4b\u95f4\uff0c\u5982\u679c max_length \u7b49\u4e8e None \uff0c\u5219 max_length = min_length + 100 \u3002 NumberField \u666e\u901a\u6570\u5b57\u5b57\u6bb5\uff0c\u7ee7\u627f\u81ea BaseField \u3002 __init__(self, min_value=None, max_value=None, **kwargs) min_value \u6700\u5c0f\u503c\u3002\u9ed8\u8ba4\u4e3a None\uff0c\u5373\u4e0d\u9650\u5236\u6700\u5c0f\u503c\u3002 max_value \u6700\u5927\u503c\u3002\u9ed8\u8ba4\u4e3a None\uff0c\u5373\u4e0d\u9650\u5236\u6700\u5927\u503c\u3002 kwargs \u5176\u5b83\u53c2\u6570\uff0c\u4f8b\u5982 BaseField \u6240\u9700\u7684\u53c2\u6570\u3002 \u7c7b\u5c5e\u6027 INTERNAL_TYPE in Python2: (int, long, float) in Python3: (int, float) FIELD_TYPE_NAME 'number' PARAMS ['min_value', 'max_value'] \u65b9\u6cd5 mock_data(self) \u8fd4\u56de\u968f\u673a\u751f\u6210\u7684\u4e00\u4e2a\u6570\u5b57\u3002\u6570\u5b57\u4ecb\u4e8e min_value \u548c max_value \u4e4b\u95f4\uff0c\u5982\u679c min_value \u7b49\u4e8e None \uff0c\u5219 min_value = 0 \uff0c\u5982\u679c max_value \u7b49\u4e8e None \uff0c\u5219 max_value = min_value + 1000 \u3002 IntegerField \u6574\u6570\u5b57\u6bb5\uff0c\u7ee7\u627f\u81ea NumberField \u3002 \u7c7b\u5c5e\u6027 INTERNAL_TYPE in Python2: (int, long) in Python3: int FIELD_TYPE_NAME 'int' FloatField \u6d6e\u70b9\u6570\u5b57\u6bb5\uff0c\u7ee7\u627f\u81ea NumberField \u3002 \u7c7b\u5c5e\u6027 INTERNAL_TYPE float FIELD_TYPE_NAME 'float' PARAMS [ ] BoolField BoolField\uff0c\u7ee7\u627f\u81ea BaseField \u3002 \u7c7b\u5c5e\u6027 INTERNAL_TYPE bool FIELD_TYPE_NAME 'bool' PARAMS [ ] \u65b9\u6cd5 mock_data(self) \u8fd4\u56de True \u6216 False UUIDField UUID \u5b57\u6bb5\uff0c\u7ee7\u627f\u81ea BaseField \u3002 \u5f53 strict \u4e3a True \u65f6\uff0c\u503c\u5fc5\u987b\u662f uuid.UUID \u7c7b\u578b\u7684\u3002 strict \u4e3a False \u65f6\uff0c\u503c\u53ef\u4ee5\u662f uuid.UUID \u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u662f\u5f62\u5982'41e40df1-ef12-46d2-9290-4d3d9dbfe24f'\uff0c'41e40df1ef1246d292904d3d9dbfe24f'\u7684\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u503c\u3002 \u6821\u9a8c\u901a\u8fc7\u540e\u8fd4\u56de\u4e00\u4e2a uuid.UUID \u5b9e\u4f8b\u3002 __init__(self, format='hex', **kwargs) format \u683c\u5f0f\u5316\u7c7b\u578b\uff0c to_presentation \u4f1a\u7528\u5230\u3002\u652f\u6301\u7684 format \u6709\uff1ahex\uff0cstr\uff0cint\uff0cbytes\uff0cbytes_le\u3002 kwargs \u5176\u5b83\u53c2\u6570\uff0c\u4f8b\u5982 BaseField \u6240\u9700\u7684\u53c2\u6570\u3002 \u7c7b\u5c5e\u6027 INTERNAL_TYPE uuid.UUID FIELD_TYPE_NAME 'UUID' PARAMS ['format'] \u65b9\u6cd5 mock_data(self) \u8fd4\u56de\u7531 uuid.uuid4() \u968f\u673a\u751f\u6210\u7684 uuid.UUID \u5b9e\u4f8b\u3002 MD5Field MD5 \u5b57\u6bb5\uff0c\u7ee7\u627f\u81ea StringField \u3002 \u5408\u6cd5\u503c\u4e3a 32 \u5b57\u8282\u7684\u5341\u516d\u8fdb\u5236\u5f62\u5f0f\u7684\u5b57\u7b26\u4e32\u3002 \u6821\u9a8c\u901a\u8fc7\u540e\u8fd4\u56de\u4e00\u4e2a\u539f\u59cb\u5b57\u7b26\u4e32\u3002 __init__(self, **kwargs) \u8986\u76d6\u7236\u7c7b\u521d\u59cb\u5316\u65b9\u6cd5\uff0c strict \u4e3a True \uff0c min_length \u548c max_length \u90fd\u7b49\u4e8e 32\u3002 kwargs \u5176\u5b83\u53c2\u6570\uff0c\u4f8b\u5982 StringField \u6216 BaseField \u6240\u9700\u7684\u53c2\u6570\u3002 \u7c7b\u5c5e\u6027 FIELD_TYPE_NAME 'md5' PARAMS [ ] \u65b9\u6cd5 mock_data(self) \u8fd4\u56de\u968f\u673a\u751f\u6210\u7684\u4e00\u6bb5 md5 \u5b57\u7b26\u4e32\u3002 SHAField SHA \u5b57\u6bb5\uff0c\u7ee7\u627f\u81ea StringField \u3002 \u5408\u6cd5\u503c\u4e3a N \u5b57\u8282\u7684\u5341\u516d\u8fdb\u5236\u5f62\u5f0f\u7684\u5b57\u7b26\u4e32\u3002 \u6821\u9a8c\u901a\u8fc7\u540e\u8fd4\u56de\u4e00\u4e2a\u539f\u59cb\u5b57\u7b26\u4e32\u3002 __init__(self, version=256, **kwargs) \u8986\u76d6\u7236\u7c7b\u521d\u59cb\u5316\u65b9\u6cd5\uff0c strict \u4e3a True \uff0c min_length \u548c max_length \u90fd\u7b49\u4e8e\u5bf9\u5e94 SHA \u7248\u672c\u7684\u957f\u5ea6\uff0c\u4f8b\u5982 SHA1 \u7684 min_length \u548c max_length \u90fd\u7b49\u4e8e 40\u3002 version SHA \u7248\u672c\uff0c\u652f\u6301\u7684\u7248\u672c\u6709\uff1a[1, 224, 256, 384, 512] kwargs \u5176\u5b83\u53c2\u6570\uff0c\u4f8b\u5982 StringField \u6216 BaseField \u6240\u9700\u7684\u53c2\u6570\u3002 \u7c7b\u5c5e\u6027 FIELD_TYPE_NAME 'sha' PARAMS [ ] \u65b9\u6cd5 mock_data(self) \u8fd4\u56de\u968f\u673a\u751f\u6210\u7684\u4e00\u6bb5 sha \u5b57\u7b26\u4e32\u3002 EmailField Email \u5b57\u6bb5\uff0c\u7ee7\u627f\u81ea StringField \u3002 \u5408\u6cd5\u503c\u4e3a\u7b26\u5408 email \u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u3002 \u6821\u9a8c\u901a\u8fc7\u540e\u8fd4\u56de\u539f\u59cb\u5b57\u7b26\u4e32\u3002 __init__(self, **kwargs) \u8986\u76d6\u7236\u7c7b\u521d\u59cb\u5316\u65b9\u6cd5\uff0c strict \u5f3a\u5236\u8bbe\u4e3a True \u3002 \u7528\u4e8e\u9a8c\u8bc1\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u4e3a: r'^[a-zA-Z0-9.!#$%&\\'*+/=?^_ {|}~-]+@ a-zA-Z0-9 ?(?:. a-zA-Z0-9 ?)*$'` kwargs \u5176\u5b83\u53c2\u6570\uff0c\u4f8b\u5982 StringField \u6216 BaseField \u6240\u9700\u7684\u53c2\u6570\u3002 \u7c7b\u5c5e\u6027 FIELD_TYPE_NAME 'email' PARAMS [ ] \u65b9\u6cd5 mock_data(self) \u8fd4\u56de\u968f\u673a\u751f\u6210\u7684 email \u5b57\u7b26\u4e32\u3002 IPAddressField IP \u5730\u5740\u5b57\u6bb5\uff0c\u7ee7\u627f\u81ea BaseField \u3002 \u652f\u6301 IPV4 \u548c IPV6 \uff0c\u6570\u636e\u7684\u6821\u9a8c\u4f9d\u8d56\u4e8e IPy \u5e93\u3002 \u5982\u679c strict \u4e3a True\uff0c\u503c\u5fc5\u987b\u662f IPy.IP \u7684\u5b9e\u4f8b\u3002\u5982\u679c strict \u4e3a False \uff0c\u503c \u65e2\u53ef\u4ee5\u662f IPy.IP \u7684\u5b9e\u4f8b\uff0c \u4e5f\u53ef\u4ee5\u662f\u4efb\u4f55 IPy.IP \u652f\u6301\u7684\u683c\u5f0f\uff0c\u4f8b\u5982\uff1a'127.0.0.1', '::1234:1234', '7f000001'\uff0c\u5177\u4f53\u8bf7\u53c2\u8003 IPy \u3002 \u6821\u9a8c\u901a\u8fc7\u540e\u8fd4\u56de IPy.IP \u5b9e\u4f8b\u3002 __init__(self, version='both', **kwargs) version \u6307\u5b9a\u7248\u672c\uff0c\u652f\u6301\u7684\u7248\u672c\u6709\uff1a['ipv4', 'ipv6', 'both'] kwargs \u5176\u5b83\u53c2\u6570\uff0c\u4f8b\u5982 BaseField \u6240\u9700\u7684\u53c2\u6570\u3002 \u7c7b\u5c5e\u6027 INTERNAL_TYPE IPy.IP FIELD_TYPE_NAME 'ip_address' PARAMS ['version'] \u65b9\u6cd5 mock_data(self) \u8fd4\u56de\u968f\u673a\u751f\u6210\u7684\u4e00\u4e2a IP \u5730\u5740\u3002 URLField \u5b57\u7b26\u4e32\u5b57\u6bb5\uff0c\u7ee7\u627f\u81ea StringField \u3002 \u5408\u6cd5\u503c\u4e3a urlparse.urlparse \u80fd\u591f\u6b63\u786e\u89e3\u6790\u4e14\u5305\u542b scheme \u548c hostname \u7684\u5b57\u7b26\u4e32\uff0c scheme \u5fc5\u987b\u662f'http'\uff0c'https'\u5176\u4e2d\u4e4b\u4e00\u3002 \u6821\u9a8c\u901a\u8fc7\u540e\u8fd4\u56de\u539f\u59cb\u5b57\u7b26\u4e32\u3002 __init__(self, **kwargs) \u8986\u76d6\u7236\u7c7b\u521d\u59cb\u5316\u65b9\u6cd5\uff0c strict \u5f3a\u5236\u8bbe\u4e3a True \u3002 kwargs \u5176\u5b83\u53c2\u6570\uff0c\u4f8b\u5982 BaseField \u6240\u9700\u7684\u53c2\u6570\u3002 \u7c7b\u5c5e\u6027 FIELD_TYPE_NAME 'url' PARAMS [ ] \u65b9\u6cd5 mock_data(self) \u8fd4\u56de\u968f\u673a\u751f\u6210\u7684 url\u3002 EnumField \u679a\u4e3e\u5b57\u6bb5\uff0c\u7ee7\u627f\u81ea BaseField \u3002 \u5408\u6cd5\u503c\u5fc5\u987b\u662f choices \u5176\u4e2d\u4e00\u5458\u3002 \u6821\u9a8c\u901a\u8fc7\u540e\u8fd4\u56de\u539f\u59cb\u503c\u3002 EnumField \u4e0d\u9a8c\u8bc1\u6570\u636e\u7c7b\u578b\uff0c\u6240\u4ee5 INTERNAL_TYPE \u7b49\u4e8e object \u3002\u53ea\u8981\u503c\u5728 choices \u4e2d\u5c31\u884c\u4e86\u3002 __init__(self, choices=None, **kwargs) choices \u53ef\u9009\u503c\u5217\u8868\u3002 kwargs \u5176\u5b83\u53c2\u6570\uff0c\u4f8b\u5982 BaseField \u6240\u9700\u7684\u53c2\u6570\u3002 \u7c7b\u5c5e\u6027 INTERNAL_TYPE object FIELD_TYPE_NAME 'enum' PARAMS ['choices'] \u65b9\u6cd5 mock_data(self) \u8fd4\u56de\u968f\u673a\u4ece choices \u4e2d\u6311\u9009\u7684\u503c\u3002 DictField \u5b57\u5178\u5b57\u6bb5\uff0c\u7ee7\u627f\u81ea BaseField \u3002 \u5408\u6cd5\u503c\u5fc5\u987b\u662f\u80fd\u591f\u901a\u8fc7 validator \u6821\u9a8c\u7684 dict \u3002 \u6821\u9a8c\u901a\u8fc7\u540e\u8fd4\u56de\u539f\u59cb\u503c\u7684\u62f7\u8d1d\u3002 __init__(self, validator=None, **kwargs) validator \u7ee7\u627f\u81ea Validator \u7684\u7c7b\uff0c\u7528\u4e8e\u9a8c\u8bc1\u5b57\u5178\u5185\u5404\u4e2a\u5b57\u6bb5\u7684\u6570\u636e\u3002\u7531\u4e8e dict \u662f\u4e00\u4e2a key-value \u7684\u590d\u5408\u6570\u636e\u7ed3\u6784\uff0c\u5f88\u96be\u901a\u8fc7\u7b80\u5355\u7684\u89c4\u5219\u53bb\u7ea6\u675f\u5b83\uff0c\u56e0\u6b64\uff0c\u6700\u76f4\u63a5\u7684\u65b9\u6cd5\u5c31\u662f\u5b9a\u4e49\u4e00\u4e2a Validator \u53bb\u6821\u9a8c dict \u3002 \u5982\u679c validator \u7b49\u4e8e None \uff0c\u5219\u4efb\u4f55 dict \u90fd\u662f\u5408\u6cd5\u7684\u3002 kwargs \u5176\u5b83\u53c2\u6570\uff0c\u4f8b\u5982 BaseField \u6240\u9700\u7684\u53c2\u6570\u3002 \u7c7b\u5c5e\u6027 INTERNAL_TYPE dict FIELD_TYPE_NAME 'dict' PARAMS ['validator'] \u65b9\u6cd5 mock_data(self) \u8c03\u7528 validator.mock_data() \u751f\u6210\u6d4b\u8bd5\u6570\u636e\uff0c\u5982\u679c validator \u7b49\u4e8e None \uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u5178 ListField \u5217\u8868\u5b57\u6bb5\uff0c\u7ee7\u627f\u81ea BaseField \u3002 \u5408\u6cd5\u503c\u662f\u4e00\u4e2a\u901a\u8fc7 field \u6821\u9a8c\u7684\u5217\u8868\uff08\u5143\u7ec4\uff09\u3002 \u6821\u9a8c\u901a\u8fc7\u540e\u8fd4\u56de\u539f\u59cb\u503c\u7684\u62f7\u8d1d\u3002 __init__(self, field=None, min_length=0, max_length=None, **kwargs) field \u5217\u8868\u5143\u7d20\u7684\u5b57\u6bb5\u7c7b\u578b\uff0c\u5fc5\u987b\u662f BaseField \u7684\u5b9e\u4f8b\u3002\u5982\u679c field \u7b49\u4e8e None\uff0c\u5219\u4e0d\u6821\u9a8c\u5217\u8868\u4e2d\u7684\u5143\u7d20\uff0c\u610f\u5473\u7740\u4efb\u4f55 list \u90fd\u662f\u5408\u6cd5\u7684\u3002 min_length \u6700\u5c0f\u957f\u5ea6\u3002\u9ed8\u8ba4\u4e3a 0\uff0c\u5373\u5141\u8bb8\u7a7a\u5217\u8868\u3002 max_length \u6700\u5927\u957f\u5ea6\u3002\u9ed8\u8ba4\u4e3a None\uff0c\u8868\u793a\u4e0d\u9650\u5236\u6700\u5927\u957f\u5ea6\u3002 kwargs \u5176\u5b83\u53c2\u6570\uff0c\u4f8b\u5982 BaseField \u6240\u9700\u7684\u53c2\u6570\u3002 \u7c7b\u5c5e\u6027 INTERNAL_TYPE (list, tuple) FIELD_TYPE_NAME 'list' PARAMS ['field', 'min_length', 'max_length'] \u65b9\u6cd5 from_dict(cls, params) field \u503c\u53ef\u4ee5\u662f\u4e00\u4e2a dict \uff0c\u5982\u679c\u53d1\u73b0 field \u662f\u4e00\u4e2a dict \uff0c\u4f1a\u81ea\u52a8\u8c03\u7528 create_field \u521b\u5efa\u76f8\u5e94\u7684\u5b57\u6bb5\u5b9e\u4f8b\u3002 mock_data(self) \u8fd4\u56de\u968f\u673a\u751f\u6210\u7684\u4e00\u4e2a\u5217\u8868\uff0c\u5143\u7d20\u7531 field \u968f\u673a\u751f\u6210\uff0c\u957f\u5ea6\u5728 min_length \u548c max_length \u4e4b\u95f4\u3002\u5982\u679c max_length \u7b49\u4e8e None \uff0c\u5219\u5047\u8bbe\u7b49\u4e8e 10\u3002\u5982\u679c field \u7b49\u4e8e None \uff0c\u5219\u5217\u8868\u5143\u7d20\u90fd\u7b49\u4e8e None \u3002 TimestampField \u65f6\u95f4\u6233\u5b57\u6bb5\uff0c\u7ee7\u627f\u81ea IntegerField \u3002 \u5408\u6cd5\u503c\u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u7684 int32\uff0c\u503c\u4ecb\u4e8e 0 ~ 2 ** 32 - 1 \u3002 \u6821\u9a8c\u901a\u8fc7\u540e\u8fd4\u56de\u539f\u59cb\u503c\u3002 __init__(self, **kwargs) \u8986\u76d6\u7236\u7c7b\u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u5c06 min_value \u8bbe\u4e3a 0 \uff0c max_value \u8bbe\u4e3a 2 ** 32 - 1 \u3002 kwargs \u5176\u5b83\u53c2\u6570\uff0c\u4f8b\u5982 IntegerField \u548c BaseField \u6240\u9700\u7684\u53c2\u6570\u3002 \u7c7b\u5c5e\u6027 FIELD_TYPE_NAME 'timestamp' PARAMS [ ] \u65b9\u6cd5 mock_data(self) \u8fd4\u56de\u968f\u673a\u751f\u6210\u7684\u65f6\u95f4\u6233\u3002 DatetimeField \u65e5\u671f\u65f6\u95f4\u5b57\u6bb5\uff0c\u7ee7\u627f\u81ea BaseField \u3002 \u5408\u6cd5\u503c\u53ef\u4ee5\u662f\u4e0b\u9762\u5176\u4e2d\u4e00\u4e2a\uff1a datatime.datetime \u7684\u5b9e\u4f8b\u3002 \u6574\u6570\u65f6\u95f4\u6233\uff0c\u5982 1531815911\u3002 \u5b57\u7b26\u4e32\u65f6\u95f4\u6233\uff0c\u5982 '1531815911'\u3002 \u7b26\u5408 dt_format \u7684\u65e5\u671f\u5b57\u7b26\u4e32\u3002\u5047\u8bbe dt_format \u4e3a '%Y/%m/%d %H:%M:%S' \uff0c\u5219\u5408\u6cd5\u7684\u5b57\u7b26\u4e32\u4e3a'2018/01/01 01:01:01'\u3002 \u6821\u9a8c\u901a\u8fc7\u540e\u8fd4\u56de\u4e00\u4e2a datatime.datetime \u7684\u5b9e\u4f8b\u3002 __init__(self, dt_format=None, tzinfo=None, **kwargs) dt_format \u65e5\u671f\u65f6\u95f4\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3002\u5982\u679c dt_format \u7b49\u4e8e None \uff0c\u5219\u5c06\u5176\u8bbe\u4e3a\u9ed8\u8ba4\u503c '%Y/%m/%d %H:%M:%S' \u3002 tzinfo \u65f6\u533a\u4fe1\u606f\uff0c\u53ef\u4ee5\u662f\u4e00\u4e2a\u65f6\u533a\u540d\u79f0\u5b57\u7b26\u4e32\u6216\u8005 tzinfo \u5b9e\u4f8b\uff0c\u8be6\u60c5\u8bf7\u53c2\u8003 python datetime tzinfo \u3002 \u5f53\u6821\u9a8c\u901a\u8fc7\u540e\uff0c\u4f1a\u5c06\u65e5\u671f\u7684\u65f6\u533a\u8bbe\u4e3a tzinfo \u3002 \u63a8\u8350\u4f7f\u7528 pytz \u5e93\u83b7\u53d6\u5404\u4e2a\u56fd\u5bb6\u5730\u533a\u7684\u65f6\u533a\u4fe1\u606f\u3002 kwargs \u5176\u5b83\u53c2\u6570\uff0c\u4f8b\u5982 BaseField \u6240\u9700\u7684\u53c2\u6570\u3002 \u7c7b\u5c5e\u6027 INTERNAL_TYPE datetime.datetime FIELD_TYPE_NAME 'datetime' PARAMS ['dt_format', 'tzinfo'] \u65b9\u6cd5 mock_data(self) \u8fd4\u56de\u968f\u673a\u751f\u6210\u7684\u65e5\u671f\u65f6\u95f4\u3002 DateField \u65e5\u671f\u5b57\u6bb5\uff0c\u7ee7\u627f\u81ea BaseField \u3002 \u5408\u6cd5\u503c\u53ef\u4ee5\u662f\u4e0b\u9762\u5176\u4e2d\u4e00\u4e2a\uff1a datatime.date \u7684\u5b9e\u4f8b\u3002 \u6574\u6570\u65f6\u95f4\u6233\uff0c\u5982 1531815911\u3002 \u5b57\u7b26\u4e32\u65f6\u95f4\u6233\uff0c\u5982 '1531815911'\u3002 \u7b26\u5408 dt_format \u7684\u65e5\u671f\u5b57\u7b26\u4e32\u3002\u5047\u8bbe dt_format \u4e3a '%Y/%m/%d' \uff0c\u5219\u5408\u6cd5\u7684\u5b57\u7b26\u4e32\u4e3a'2018/01/01'\u3002 \u6821\u9a8c\u901a\u8fc7\u540e\u8fd4\u56de\u4e00\u4e2a datatime.datetime \u7684\u5b9e\u4f8b\u3002 __init__(self, dt_format=None, **kwargs) dt_format \u65e5\u671f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3002\u5982\u679c dt_format \u7b49\u4e8e None \uff0c\u5219\u5c06\u5176\u8bbe\u4e3a\u9ed8\u8ba4\u503c '%Y/%m/%d' \u3002 kwargs \u5176\u5b83\u53c2\u6570\uff0c\u4f8b\u5982 BaseField \u6240\u9700\u7684\u53c2\u6570\u3002 \u7c7b\u5c5e\u6027 INTERNAL_TYPE datetime.date FIELD_TYPE_NAME 'date' PARAMS ['dt_format'] \u65b9\u6cd5 mock_data(self) \u8fd4\u56de\u968f\u673a\u751f\u6210\u7684\u65e5\u671f\u3002","title":"\u5b57\u6bb5 API"},{"location":"fields/#api","text":"\u4e0b\u9762\u5c06\u8981\u4ecb\u7ecd python-validator \u4e2d\u6240\u6709\u7684\u5b57\u6bb5\u3002","title":"\u5b57\u6bb5 API"},{"location":"fields/#_1","text":"FIELDS_NAME_MAP \u6240\u6709\u5b57\u6bb5\u540d\u79f0\u548c\u5b57\u6bb5\u7c7b\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u4f8b\u5982: { 'string': StringField, 'integer': IntegerField, ... }","title":"\u6a21\u5757\u5c5e\u6027"},{"location":"fields/#_2","text":"create_field(field_info) \u6839\u636e field_info \u521b\u5efa\u4e00\u4e2a\u5b57\u6bb5\u5b9e\u4f8b\uff0c field_info \u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u5305\u542b\u4e86\u5b57\u6bb5\u7c7b\u578b\u53ca\u521d\u59cb\u5316\u53c2\u6570\uff0c\u4f8b\u5982 string_field.to_dict() \u7684\u8fd4\u56de\u503c\u3002 \u4e00\u822c\u4e0d\u4f1a\u76f4\u63a5\u4f7f\u7528\u5230\u8be5\u65b9\u6cd5\uff0c\u5982\u679c\u60f3\u8981\u901a\u8fc7\u6570\u636e\u7ed3\u6784\u5b57\u5178\u521b\u5efa Validator \uff0c\u8bf7\u67e5\u770b \u901a\u8fc7\u6570\u636e\u7ed3\u6784\u5b57\u5178\u521b\u5efa Validator \u3002","title":"\u6a21\u5757\u65b9\u6cd5"},{"location":"fields/#basefield","text":"\u6240\u6709\u5b57\u6bb5\u7684\u7236\u7c7b\u3002 __init__(self, strict=True, default=EMPTY_VALUE, validators=None, required=False, **kwargs) strict bool \u7c7b\u578b\uff0c\u662f\u5426\u91c7\u7528\u4e25\u683c\u7c7b\u578b\u6821\u9a8c\u3002\u5f53 strict = True \u65f6\uff0c\u503c\u5fc5\u987b\u662f\u8be5\u5b57\u6bb5\u7c7b\u578b\u7684\u5b9e\u4f8b\uff0c\u5373 isinstance(value, INTERNAL_TYPE) \uff0c\u5426\u5219\u53d1\u751f\u5f02\u5e38 FieldValidationError('got a wrong type: {0}, expect {1}') \u3002 \u5f53 strict = False \u65f6\uff0c\u5982\u679c\u503c\u4e0d\u662f\u5b57\u6bb5\u7c7b\u578b\u7684\u5b9e\u4f8b\uff0c\u4f1a\u5c1d\u8bd5\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362\uff0c\u5047\u5982\u8f6c\u6362\u5931\u8d25\u53d1\u751f\u5f02\u5e38 FieldValidationError('type convertion is failed: {0} -> {1}') default \u5b57\u6bb5\u7684\u9ed8\u8ba4\u503c\u3002 default \u9ed8\u8ba4\u4e3a EMPTY_VALUE \uff0c EMPTY_VALUE \u662f python-validator \u5185\u90e8\u4f7f\u7528\u7684\u4e00\u4e2a\u7a7a\u503c\uff0c\u4ee5\u533a\u522b None\u3002\u5f53\u5f85\u6821\u9a8c\u6570\u636e\u4e2d\u7f3a\u5931\u8be5\u5b57\u6bb5\u65f6\uff0c\u4f7f\u7528 default \u3002 python-validator \u4f1a\u5bf9 default \u8fdb\u884c\u6821\u9a8c\uff08\u9664\u975e default \u7b49\u4e8e EMPTY_VALUE \u6216\u8005 None \uff09\uff0c\u6240\u4ee5\u8bf7\u63d0\u4f9b\u5408\u6cd5\u7684 default \u3002 required bool \u7c7b\u578b\uff0c\u5b57\u6bb5\u662f\u5426\u662f\u5fc5\u987b\u7684\u3002\u5982\u679c\u8be5\u5b57\u6bb5\u662f\u5fc5\u987b\u7684\u4e14\u6ca1\u6709\u6307\u5b9a\u9ed8\u8ba4\u503c\uff0c\u4f1a\u5bfc\u81f4\u5f02\u5e38 FieldRequiredError \u3002 validators \u5217\u8868\u7c7b\u578b\uff0c\u63d0\u4f9b\u4e00\u7ec4\u989d\u5916\u7684\u6821\u9a8c\u5668\u3002validator \u53ef\u4ee5\u662f\u51fd\u6570\u6216\u8005\u5176\u5b83\u53ef\u8c03\u7528\u7684\u5bf9\u8c61\uff0cvalidator \u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\uff0c\u5373\u5b57\u6bb5\u503c\u3002\u51fd\u6570\u7684\u8fd4\u56de\u503c\u65e0\u6548\uff0c\u56e0\u6b64\u65e0\u6cd5\u5b9e\u73b0\u7ea7\u8054\u6821\u9a8c\u7684\u6548\u679c\uff08 value | validate(value) | validate(value) \uff09\u3002\u4e0d\u8981\u5728\u51fd\u6570\u4e2d\u4fee\u6539\u5b57\u6bb5\u503c\u3002 kwargs \u76ee\u524d\u672a\u4f7f\u7528\u3002 \u7c7b\u5c5e\u6027 INTERNAL_TYPE \u5b57\u6bb5\u5185\u90e8\u7c7b\u578b\u3002\u53ef\u4ee5\u662f\u5355\u4e2a\u7c7b\u578b\u6216\u8005\u7c7b\u578b\u5217\u8868\uff0c\u4f8b\u5982 StringField \u7684 INTERNAL_TYPE \u7b49\u4e8e str \uff08in Python2\uff09\u6216\u8005 (str, unicode) \uff08in python3\uff09 FIELD_TYPE_NAME \u5b57\u6bb5\u7c7b\u578b\u540d\u5b57\u3002\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u7c7b\u578b\u540d\u5b57\uff0c\u4e3b\u8981\u662f\u4e3a\u4e86\u53ef\u8bfb\u6027\u548c\u65b9\u4fbf\u663e\u793a\u3002 PARAMS \u53c2\u6570\u540d\u79f0\u5217\u8868\u3002 PARAMS \u5305\u542b\u6240\u6709\u521d\u59cb\u5316\u65b9\u6cd5\u6240\u9700\u7684\u53c2\u6570\u540d\u79f0\u3002\u4f8b\u5982 BaseField \u7684 PARAMS \u7b49\u4e8e ['strict', 'default', 'validators', 'required'] \u65b9\u6cd5 validate(self, value) \u66b4\u9732\u7ed9\u5916\u90e8\u8c03\u7528\u7684\u6821\u9a8c\u6570\u636e\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u9996\u5148\u8c03\u7528 _validate() \u6821\u9a8c\u6570\u636e\uff0c\u63a5\u7740\u904d\u5386 validators \u6821\u9a8c\u6570\u636e\uff0c\u6700\u540e\u8fd4\u56de\u6821\u9a8c\u540e\u7684\u503c\u3002 _validate(self, value) \u79c1\u6709\u6821\u9a8c\u6570\u636e\u65b9\u6cd5\uff0c\u6821\u9a8c\u6210\u529f\u5e94\u8be5\u8fd4\u56de\u5408\u6cd5\u503c\uff0c\u5931\u8d25\u5219\u89e6\u53d1\u5f02\u5e38 FieldValidationError \u3002\u5b50\u7c7b\u5e94\u8be5\u8986\u76d6\u8be5\u65b9\u6cd5\u5b9e\u73b0\u81ea\u5df1\u7684\u6821\u9a8c\u903b\u8f91\u3002\u5982\u679c value \u662f\u53ef\u53d8\u7c7b\u578b\u7684\u6570\u636e\uff0c\u5efa\u8bae\u62f7\u8d1d\u4e00\u4efd value \uff0c\u9632\u6b62\u4fee\u6539\u6570\u636e\u5f71\u54cd\u5230\u539f\u59cb\u6570\u636e\u3002 _validate_type(self, value) \u6821\u9a8c\u6570\u636e\u7c7b\u578b\u3002 _validate \u53ef\u4ee5\u8c03\u7528\u8be5\u65b9\u6cd5\u6821\u9a8c\u6570\u636e\u7c7b\u578b\u3002\u6821\u9a8c\u7c7b\u578b\u7684\u903b\u8f91\u5982\u4e0b\uff1a \u5982\u679c value \u4e0d\u662f INTERNAL_TYPE \u7684\u5b9e\u4f8b\uff0c \u5982\u679c strict \u4e3a True \uff0c\u5219\u89e6\u53d1\u5f02\u5e38 FieldValidationError \u3002 \u5982\u679c strict \u4e3a False \uff0c\u5219\u5c1d\u8bd5\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362\u3002\u8f6c\u6362\u6210\u529f\u8fd4\u56de\u8f6c\u6362\u540e\u7684\u503c\uff0c\u8f6c\u6362\u5931\u8d25\u89e6\u53d1 FieldValidationError \u3002 \u5982\u679c value \u662f INTERNAL_TYPE \u7684\u5b9e\u4f8b\uff0c\u5219\u76f4\u63a5\u8fd4\u56de value _convert_type(self, value) \u8f6c\u6362\u6570\u636e\u7c7b\u578b\uff0c\u8fd4\u56de\u8f6c\u6362\u540e\u7684\u503c\u3002 is_required(self) \u8be5\u5b57\u6bb5\u662f\u5426\u5fc5\u987b\u3002 get_default(self) \u8fd4\u56de\u9ed8\u8ba4\u503c\u3002 to_presentation(self, value) \u5c06 value \u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u5f62\u5f0f\uff0c value \u5fc5\u987b\u662f\u7ecf\u8fc7\u6821\u9a8c\u5408\u6cd5\u7684\u503c\u3002 to_internal(self, value) \u5c06 value \u8f6c\u6362\u4e3a\u5185\u90e8\u5f62\u5f0f\uff0c value \u5fc5\u987b\u662f\u7ecf\u8fc7\u6821\u9a8c\u5408\u6cd5\u7684\u503c\u3002\u4e00\u822c\u76f4\u63a5\u8fd4\u56de value \u3002 to_dict(self) \u5c06\u5b57\u6bb5\u8f6c\u6362\u4e3a\u5b57\u5178\u5f62\u5f0f\uff0c\u5b57\u5178\u63cf\u8ff0\u4e86\u8be5\u5b57\u6bb5\u7684\u7c7b\u578b\u548c\u521d\u59cb\u5316\u53c2\u6570\u3002 from_dict(cls, params) \u4ece params \u521b\u5efa\u4e00\u4e2a\u5b57\u6bb5\u5b9e\u4f8b\u3002\u521b\u5efa\u5b57\u6bb5\u5b9e\u4f8b\u7684\u4ee3\u7801\u5c31\u4e00\u53e5 return cls(**params) \uff0c\u5982\u679c\u60f3\u8981\u5b9e\u73b0\u66f4\u591a\u81ea\u5b9a\u4e49\u7684\u521b\u5efa\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u8986\u76d6\u8be5\u65b9\u6cd5\u3002 mock_data(self) \u8fd4\u56de\u53ef\u7528\u4e8e\u6d4b\u8bd5\u7684\u968f\u673a\u503c\u3002","title":"BaseField"},{"location":"fields/#stringfield","text":"\u5b57\u7b26\u4e32\u5b57\u6bb5\uff0c\u7ee7\u627f\u81ea BaseField \u3002 __init__(self, min_length=0, max_length=None, regex=None, **kwargs) min_length \u6700\u5c0f\u957f\u5ea6\uff0c\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u3002\u9ed8\u8ba4\u4e3a 0\uff0c\u5373\u5141\u8bb8\u7a7a\u5b57\u7b26\u4e32\u3002 max_length \u6700\u5927\u957f\u5ea6\uff0c\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u3002\u9ed8\u8ba4\u4e3a None\uff0c\u8868\u793a\u4e0d\u9650\u5236\u6700\u5927\u957f\u5ea6\u3002 regex \u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u6d4b\u8bd5\u5b57\u7b26\u4e32\u662f\u5426\u5339\u914d\u3002\u4f7f\u7528 re.match \u8fdb\u884c\u5339\u914d\u3002 regex \u53ef\u4ee5\u662f\u5b57\u7b26\u4e32\u6216\u8005\u7ecf\u8fc7 re.compile \u7684 _sre.SRE_Pattern \u5bf9\u8c61\u3002 kwargs \u5176\u5b83\u53c2\u6570\uff0c\u4f8b\u5982 BaseField \u6240\u9700\u7684\u53c2\u6570\u3002 \u7c7b\u5c5e\u6027 INTERNAL_TYPE in Python2: (str, unicode) in Python3: str FIELD_TYPE_NAME 'string' PARAMS ['min_length', 'max_length', 'regex'] \u65b9\u6cd5 mock_data(self) \u8fd4\u56de\u968f\u673a\u751f\u6210\u7684\u4e00\u6bb5\u5b57\u7b26\u4e32\u3002\u5b57\u7b26\u4e32\u957f\u5ea6\u662f\u4e00\u4e2a\u968f\u673a\u503c\uff0c\u4ecb\u4e8e min_length \u548c max_length \u4e4b\u95f4\uff0c\u5982\u679c max_length \u7b49\u4e8e None \uff0c\u5219 max_length = min_length + 100 \u3002","title":"StringField"},{"location":"fields/#numberfield","text":"\u666e\u901a\u6570\u5b57\u5b57\u6bb5\uff0c\u7ee7\u627f\u81ea BaseField \u3002 __init__(self, min_value=None, max_value=None, **kwargs) min_value \u6700\u5c0f\u503c\u3002\u9ed8\u8ba4\u4e3a None\uff0c\u5373\u4e0d\u9650\u5236\u6700\u5c0f\u503c\u3002 max_value \u6700\u5927\u503c\u3002\u9ed8\u8ba4\u4e3a None\uff0c\u5373\u4e0d\u9650\u5236\u6700\u5927\u503c\u3002 kwargs \u5176\u5b83\u53c2\u6570\uff0c\u4f8b\u5982 BaseField \u6240\u9700\u7684\u53c2\u6570\u3002 \u7c7b\u5c5e\u6027 INTERNAL_TYPE in Python2: (int, long, float) in Python3: (int, float) FIELD_TYPE_NAME 'number' PARAMS ['min_value', 'max_value'] \u65b9\u6cd5 mock_data(self) \u8fd4\u56de\u968f\u673a\u751f\u6210\u7684\u4e00\u4e2a\u6570\u5b57\u3002\u6570\u5b57\u4ecb\u4e8e min_value \u548c max_value \u4e4b\u95f4\uff0c\u5982\u679c min_value \u7b49\u4e8e None \uff0c\u5219 min_value = 0 \uff0c\u5982\u679c max_value \u7b49\u4e8e None \uff0c\u5219 max_value = min_value + 1000 \u3002","title":"NumberField"},{"location":"fields/#integerfield","text":"\u6574\u6570\u5b57\u6bb5\uff0c\u7ee7\u627f\u81ea NumberField \u3002 \u7c7b\u5c5e\u6027 INTERNAL_TYPE in Python2: (int, long) in Python3: int FIELD_TYPE_NAME 'int'","title":"IntegerField"},{"location":"fields/#floatfield","text":"\u6d6e\u70b9\u6570\u5b57\u6bb5\uff0c\u7ee7\u627f\u81ea NumberField \u3002 \u7c7b\u5c5e\u6027 INTERNAL_TYPE float FIELD_TYPE_NAME 'float' PARAMS [ ]","title":"FloatField"},{"location":"fields/#boolfield","text":"BoolField\uff0c\u7ee7\u627f\u81ea BaseField \u3002 \u7c7b\u5c5e\u6027 INTERNAL_TYPE bool FIELD_TYPE_NAME 'bool' PARAMS [ ] \u65b9\u6cd5 mock_data(self) \u8fd4\u56de True \u6216 False","title":"BoolField"},{"location":"fields/#uuidfield","text":"UUID \u5b57\u6bb5\uff0c\u7ee7\u627f\u81ea BaseField \u3002 \u5f53 strict \u4e3a True \u65f6\uff0c\u503c\u5fc5\u987b\u662f uuid.UUID \u7c7b\u578b\u7684\u3002 strict \u4e3a False \u65f6\uff0c\u503c\u53ef\u4ee5\u662f uuid.UUID \u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u662f\u5f62\u5982'41e40df1-ef12-46d2-9290-4d3d9dbfe24f'\uff0c'41e40df1ef1246d292904d3d9dbfe24f'\u7684\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u503c\u3002 \u6821\u9a8c\u901a\u8fc7\u540e\u8fd4\u56de\u4e00\u4e2a uuid.UUID \u5b9e\u4f8b\u3002 __init__(self, format='hex', **kwargs) format \u683c\u5f0f\u5316\u7c7b\u578b\uff0c to_presentation \u4f1a\u7528\u5230\u3002\u652f\u6301\u7684 format \u6709\uff1ahex\uff0cstr\uff0cint\uff0cbytes\uff0cbytes_le\u3002 kwargs \u5176\u5b83\u53c2\u6570\uff0c\u4f8b\u5982 BaseField \u6240\u9700\u7684\u53c2\u6570\u3002 \u7c7b\u5c5e\u6027 INTERNAL_TYPE uuid.UUID FIELD_TYPE_NAME 'UUID' PARAMS ['format'] \u65b9\u6cd5 mock_data(self) \u8fd4\u56de\u7531 uuid.uuid4() \u968f\u673a\u751f\u6210\u7684 uuid.UUID \u5b9e\u4f8b\u3002","title":"UUIDField"},{"location":"fields/#md5field","text":"MD5 \u5b57\u6bb5\uff0c\u7ee7\u627f\u81ea StringField \u3002 \u5408\u6cd5\u503c\u4e3a 32 \u5b57\u8282\u7684\u5341\u516d\u8fdb\u5236\u5f62\u5f0f\u7684\u5b57\u7b26\u4e32\u3002 \u6821\u9a8c\u901a\u8fc7\u540e\u8fd4\u56de\u4e00\u4e2a\u539f\u59cb\u5b57\u7b26\u4e32\u3002 __init__(self, **kwargs) \u8986\u76d6\u7236\u7c7b\u521d\u59cb\u5316\u65b9\u6cd5\uff0c strict \u4e3a True \uff0c min_length \u548c max_length \u90fd\u7b49\u4e8e 32\u3002 kwargs \u5176\u5b83\u53c2\u6570\uff0c\u4f8b\u5982 StringField \u6216 BaseField \u6240\u9700\u7684\u53c2\u6570\u3002 \u7c7b\u5c5e\u6027 FIELD_TYPE_NAME 'md5' PARAMS [ ] \u65b9\u6cd5 mock_data(self) \u8fd4\u56de\u968f\u673a\u751f\u6210\u7684\u4e00\u6bb5 md5 \u5b57\u7b26\u4e32\u3002","title":"MD5Field"},{"location":"fields/#shafield","text":"SHA \u5b57\u6bb5\uff0c\u7ee7\u627f\u81ea StringField \u3002 \u5408\u6cd5\u503c\u4e3a N \u5b57\u8282\u7684\u5341\u516d\u8fdb\u5236\u5f62\u5f0f\u7684\u5b57\u7b26\u4e32\u3002 \u6821\u9a8c\u901a\u8fc7\u540e\u8fd4\u56de\u4e00\u4e2a\u539f\u59cb\u5b57\u7b26\u4e32\u3002 __init__(self, version=256, **kwargs) \u8986\u76d6\u7236\u7c7b\u521d\u59cb\u5316\u65b9\u6cd5\uff0c strict \u4e3a True \uff0c min_length \u548c max_length \u90fd\u7b49\u4e8e\u5bf9\u5e94 SHA \u7248\u672c\u7684\u957f\u5ea6\uff0c\u4f8b\u5982 SHA1 \u7684 min_length \u548c max_length \u90fd\u7b49\u4e8e 40\u3002 version SHA \u7248\u672c\uff0c\u652f\u6301\u7684\u7248\u672c\u6709\uff1a[1, 224, 256, 384, 512] kwargs \u5176\u5b83\u53c2\u6570\uff0c\u4f8b\u5982 StringField \u6216 BaseField \u6240\u9700\u7684\u53c2\u6570\u3002 \u7c7b\u5c5e\u6027 FIELD_TYPE_NAME 'sha' PARAMS [ ] \u65b9\u6cd5 mock_data(self) \u8fd4\u56de\u968f\u673a\u751f\u6210\u7684\u4e00\u6bb5 sha \u5b57\u7b26\u4e32\u3002","title":"SHAField"},{"location":"fields/#emailfield","text":"Email \u5b57\u6bb5\uff0c\u7ee7\u627f\u81ea StringField \u3002 \u5408\u6cd5\u503c\u4e3a\u7b26\u5408 email \u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u3002 \u6821\u9a8c\u901a\u8fc7\u540e\u8fd4\u56de\u539f\u59cb\u5b57\u7b26\u4e32\u3002 __init__(self, **kwargs) \u8986\u76d6\u7236\u7c7b\u521d\u59cb\u5316\u65b9\u6cd5\uff0c strict \u5f3a\u5236\u8bbe\u4e3a True \u3002 \u7528\u4e8e\u9a8c\u8bc1\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u4e3a: r'^[a-zA-Z0-9.!#$%&\\'*+/=?^_ {|}~-]+@ a-zA-Z0-9 ?(?:. a-zA-Z0-9 ?)*$'` kwargs \u5176\u5b83\u53c2\u6570\uff0c\u4f8b\u5982 StringField \u6216 BaseField \u6240\u9700\u7684\u53c2\u6570\u3002 \u7c7b\u5c5e\u6027 FIELD_TYPE_NAME 'email' PARAMS [ ] \u65b9\u6cd5 mock_data(self) \u8fd4\u56de\u968f\u673a\u751f\u6210\u7684 email \u5b57\u7b26\u4e32\u3002","title":"EmailField"},{"location":"fields/#ipaddressfield","text":"IP \u5730\u5740\u5b57\u6bb5\uff0c\u7ee7\u627f\u81ea BaseField \u3002 \u652f\u6301 IPV4 \u548c IPV6 \uff0c\u6570\u636e\u7684\u6821\u9a8c\u4f9d\u8d56\u4e8e IPy \u5e93\u3002 \u5982\u679c strict \u4e3a True\uff0c\u503c\u5fc5\u987b\u662f IPy.IP \u7684\u5b9e\u4f8b\u3002\u5982\u679c strict \u4e3a False \uff0c\u503c \u65e2\u53ef\u4ee5\u662f IPy.IP \u7684\u5b9e\u4f8b\uff0c \u4e5f\u53ef\u4ee5\u662f\u4efb\u4f55 IPy.IP \u652f\u6301\u7684\u683c\u5f0f\uff0c\u4f8b\u5982\uff1a'127.0.0.1', '::1234:1234', '7f000001'\uff0c\u5177\u4f53\u8bf7\u53c2\u8003 IPy \u3002 \u6821\u9a8c\u901a\u8fc7\u540e\u8fd4\u56de IPy.IP \u5b9e\u4f8b\u3002 __init__(self, version='both', **kwargs) version \u6307\u5b9a\u7248\u672c\uff0c\u652f\u6301\u7684\u7248\u672c\u6709\uff1a['ipv4', 'ipv6', 'both'] kwargs \u5176\u5b83\u53c2\u6570\uff0c\u4f8b\u5982 BaseField \u6240\u9700\u7684\u53c2\u6570\u3002 \u7c7b\u5c5e\u6027 INTERNAL_TYPE IPy.IP FIELD_TYPE_NAME 'ip_address' PARAMS ['version'] \u65b9\u6cd5 mock_data(self) \u8fd4\u56de\u968f\u673a\u751f\u6210\u7684\u4e00\u4e2a IP \u5730\u5740\u3002","title":"IPAddressField"},{"location":"fields/#urlfield","text":"\u5b57\u7b26\u4e32\u5b57\u6bb5\uff0c\u7ee7\u627f\u81ea StringField \u3002 \u5408\u6cd5\u503c\u4e3a urlparse.urlparse \u80fd\u591f\u6b63\u786e\u89e3\u6790\u4e14\u5305\u542b scheme \u548c hostname \u7684\u5b57\u7b26\u4e32\uff0c scheme \u5fc5\u987b\u662f'http'\uff0c'https'\u5176\u4e2d\u4e4b\u4e00\u3002 \u6821\u9a8c\u901a\u8fc7\u540e\u8fd4\u56de\u539f\u59cb\u5b57\u7b26\u4e32\u3002 __init__(self, **kwargs) \u8986\u76d6\u7236\u7c7b\u521d\u59cb\u5316\u65b9\u6cd5\uff0c strict \u5f3a\u5236\u8bbe\u4e3a True \u3002 kwargs \u5176\u5b83\u53c2\u6570\uff0c\u4f8b\u5982 BaseField \u6240\u9700\u7684\u53c2\u6570\u3002 \u7c7b\u5c5e\u6027 FIELD_TYPE_NAME 'url' PARAMS [ ] \u65b9\u6cd5 mock_data(self) \u8fd4\u56de\u968f\u673a\u751f\u6210\u7684 url\u3002","title":"URLField"},{"location":"fields/#enumfield","text":"\u679a\u4e3e\u5b57\u6bb5\uff0c\u7ee7\u627f\u81ea BaseField \u3002 \u5408\u6cd5\u503c\u5fc5\u987b\u662f choices \u5176\u4e2d\u4e00\u5458\u3002 \u6821\u9a8c\u901a\u8fc7\u540e\u8fd4\u56de\u539f\u59cb\u503c\u3002 EnumField \u4e0d\u9a8c\u8bc1\u6570\u636e\u7c7b\u578b\uff0c\u6240\u4ee5 INTERNAL_TYPE \u7b49\u4e8e object \u3002\u53ea\u8981\u503c\u5728 choices \u4e2d\u5c31\u884c\u4e86\u3002 __init__(self, choices=None, **kwargs) choices \u53ef\u9009\u503c\u5217\u8868\u3002 kwargs \u5176\u5b83\u53c2\u6570\uff0c\u4f8b\u5982 BaseField \u6240\u9700\u7684\u53c2\u6570\u3002 \u7c7b\u5c5e\u6027 INTERNAL_TYPE object FIELD_TYPE_NAME 'enum' PARAMS ['choices'] \u65b9\u6cd5 mock_data(self) \u8fd4\u56de\u968f\u673a\u4ece choices \u4e2d\u6311\u9009\u7684\u503c\u3002","title":"EnumField"},{"location":"fields/#dictfield","text":"\u5b57\u5178\u5b57\u6bb5\uff0c\u7ee7\u627f\u81ea BaseField \u3002 \u5408\u6cd5\u503c\u5fc5\u987b\u662f\u80fd\u591f\u901a\u8fc7 validator \u6821\u9a8c\u7684 dict \u3002 \u6821\u9a8c\u901a\u8fc7\u540e\u8fd4\u56de\u539f\u59cb\u503c\u7684\u62f7\u8d1d\u3002 __init__(self, validator=None, **kwargs) validator \u7ee7\u627f\u81ea Validator \u7684\u7c7b\uff0c\u7528\u4e8e\u9a8c\u8bc1\u5b57\u5178\u5185\u5404\u4e2a\u5b57\u6bb5\u7684\u6570\u636e\u3002\u7531\u4e8e dict \u662f\u4e00\u4e2a key-value \u7684\u590d\u5408\u6570\u636e\u7ed3\u6784\uff0c\u5f88\u96be\u901a\u8fc7\u7b80\u5355\u7684\u89c4\u5219\u53bb\u7ea6\u675f\u5b83\uff0c\u56e0\u6b64\uff0c\u6700\u76f4\u63a5\u7684\u65b9\u6cd5\u5c31\u662f\u5b9a\u4e49\u4e00\u4e2a Validator \u53bb\u6821\u9a8c dict \u3002 \u5982\u679c validator \u7b49\u4e8e None \uff0c\u5219\u4efb\u4f55 dict \u90fd\u662f\u5408\u6cd5\u7684\u3002 kwargs \u5176\u5b83\u53c2\u6570\uff0c\u4f8b\u5982 BaseField \u6240\u9700\u7684\u53c2\u6570\u3002 \u7c7b\u5c5e\u6027 INTERNAL_TYPE dict FIELD_TYPE_NAME 'dict' PARAMS ['validator'] \u65b9\u6cd5 mock_data(self) \u8c03\u7528 validator.mock_data() \u751f\u6210\u6d4b\u8bd5\u6570\u636e\uff0c\u5982\u679c validator \u7b49\u4e8e None \uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u5178","title":"DictField"},{"location":"fields/#listfield","text":"\u5217\u8868\u5b57\u6bb5\uff0c\u7ee7\u627f\u81ea BaseField \u3002 \u5408\u6cd5\u503c\u662f\u4e00\u4e2a\u901a\u8fc7 field \u6821\u9a8c\u7684\u5217\u8868\uff08\u5143\u7ec4\uff09\u3002 \u6821\u9a8c\u901a\u8fc7\u540e\u8fd4\u56de\u539f\u59cb\u503c\u7684\u62f7\u8d1d\u3002 __init__(self, field=None, min_length=0, max_length=None, **kwargs) field \u5217\u8868\u5143\u7d20\u7684\u5b57\u6bb5\u7c7b\u578b\uff0c\u5fc5\u987b\u662f BaseField \u7684\u5b9e\u4f8b\u3002\u5982\u679c field \u7b49\u4e8e None\uff0c\u5219\u4e0d\u6821\u9a8c\u5217\u8868\u4e2d\u7684\u5143\u7d20\uff0c\u610f\u5473\u7740\u4efb\u4f55 list \u90fd\u662f\u5408\u6cd5\u7684\u3002 min_length \u6700\u5c0f\u957f\u5ea6\u3002\u9ed8\u8ba4\u4e3a 0\uff0c\u5373\u5141\u8bb8\u7a7a\u5217\u8868\u3002 max_length \u6700\u5927\u957f\u5ea6\u3002\u9ed8\u8ba4\u4e3a None\uff0c\u8868\u793a\u4e0d\u9650\u5236\u6700\u5927\u957f\u5ea6\u3002 kwargs \u5176\u5b83\u53c2\u6570\uff0c\u4f8b\u5982 BaseField \u6240\u9700\u7684\u53c2\u6570\u3002 \u7c7b\u5c5e\u6027 INTERNAL_TYPE (list, tuple) FIELD_TYPE_NAME 'list' PARAMS ['field', 'min_length', 'max_length'] \u65b9\u6cd5 from_dict(cls, params) field \u503c\u53ef\u4ee5\u662f\u4e00\u4e2a dict \uff0c\u5982\u679c\u53d1\u73b0 field \u662f\u4e00\u4e2a dict \uff0c\u4f1a\u81ea\u52a8\u8c03\u7528 create_field \u521b\u5efa\u76f8\u5e94\u7684\u5b57\u6bb5\u5b9e\u4f8b\u3002 mock_data(self) \u8fd4\u56de\u968f\u673a\u751f\u6210\u7684\u4e00\u4e2a\u5217\u8868\uff0c\u5143\u7d20\u7531 field \u968f\u673a\u751f\u6210\uff0c\u957f\u5ea6\u5728 min_length \u548c max_length \u4e4b\u95f4\u3002\u5982\u679c max_length \u7b49\u4e8e None \uff0c\u5219\u5047\u8bbe\u7b49\u4e8e 10\u3002\u5982\u679c field \u7b49\u4e8e None \uff0c\u5219\u5217\u8868\u5143\u7d20\u90fd\u7b49\u4e8e None \u3002","title":"ListField"},{"location":"fields/#timestampfield","text":"\u65f6\u95f4\u6233\u5b57\u6bb5\uff0c\u7ee7\u627f\u81ea IntegerField \u3002 \u5408\u6cd5\u503c\u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u7684 int32\uff0c\u503c\u4ecb\u4e8e 0 ~ 2 ** 32 - 1 \u3002 \u6821\u9a8c\u901a\u8fc7\u540e\u8fd4\u56de\u539f\u59cb\u503c\u3002 __init__(self, **kwargs) \u8986\u76d6\u7236\u7c7b\u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u5c06 min_value \u8bbe\u4e3a 0 \uff0c max_value \u8bbe\u4e3a 2 ** 32 - 1 \u3002 kwargs \u5176\u5b83\u53c2\u6570\uff0c\u4f8b\u5982 IntegerField \u548c BaseField \u6240\u9700\u7684\u53c2\u6570\u3002 \u7c7b\u5c5e\u6027 FIELD_TYPE_NAME 'timestamp' PARAMS [ ] \u65b9\u6cd5 mock_data(self) \u8fd4\u56de\u968f\u673a\u751f\u6210\u7684\u65f6\u95f4\u6233\u3002","title":"TimestampField"},{"location":"fields/#datetimefield","text":"\u65e5\u671f\u65f6\u95f4\u5b57\u6bb5\uff0c\u7ee7\u627f\u81ea BaseField \u3002 \u5408\u6cd5\u503c\u53ef\u4ee5\u662f\u4e0b\u9762\u5176\u4e2d\u4e00\u4e2a\uff1a datatime.datetime \u7684\u5b9e\u4f8b\u3002 \u6574\u6570\u65f6\u95f4\u6233\uff0c\u5982 1531815911\u3002 \u5b57\u7b26\u4e32\u65f6\u95f4\u6233\uff0c\u5982 '1531815911'\u3002 \u7b26\u5408 dt_format \u7684\u65e5\u671f\u5b57\u7b26\u4e32\u3002\u5047\u8bbe dt_format \u4e3a '%Y/%m/%d %H:%M:%S' \uff0c\u5219\u5408\u6cd5\u7684\u5b57\u7b26\u4e32\u4e3a'2018/01/01 01:01:01'\u3002 \u6821\u9a8c\u901a\u8fc7\u540e\u8fd4\u56de\u4e00\u4e2a datatime.datetime \u7684\u5b9e\u4f8b\u3002 __init__(self, dt_format=None, tzinfo=None, **kwargs) dt_format \u65e5\u671f\u65f6\u95f4\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3002\u5982\u679c dt_format \u7b49\u4e8e None \uff0c\u5219\u5c06\u5176\u8bbe\u4e3a\u9ed8\u8ba4\u503c '%Y/%m/%d %H:%M:%S' \u3002 tzinfo \u65f6\u533a\u4fe1\u606f\uff0c\u53ef\u4ee5\u662f\u4e00\u4e2a\u65f6\u533a\u540d\u79f0\u5b57\u7b26\u4e32\u6216\u8005 tzinfo \u5b9e\u4f8b\uff0c\u8be6\u60c5\u8bf7\u53c2\u8003 python datetime tzinfo \u3002 \u5f53\u6821\u9a8c\u901a\u8fc7\u540e\uff0c\u4f1a\u5c06\u65e5\u671f\u7684\u65f6\u533a\u8bbe\u4e3a tzinfo \u3002 \u63a8\u8350\u4f7f\u7528 pytz \u5e93\u83b7\u53d6\u5404\u4e2a\u56fd\u5bb6\u5730\u533a\u7684\u65f6\u533a\u4fe1\u606f\u3002 kwargs \u5176\u5b83\u53c2\u6570\uff0c\u4f8b\u5982 BaseField \u6240\u9700\u7684\u53c2\u6570\u3002 \u7c7b\u5c5e\u6027 INTERNAL_TYPE datetime.datetime FIELD_TYPE_NAME 'datetime' PARAMS ['dt_format', 'tzinfo'] \u65b9\u6cd5 mock_data(self) \u8fd4\u56de\u968f\u673a\u751f\u6210\u7684\u65e5\u671f\u65f6\u95f4\u3002","title":"DatetimeField"},{"location":"fields/#datefield","text":"\u65e5\u671f\u5b57\u6bb5\uff0c\u7ee7\u627f\u81ea BaseField \u3002 \u5408\u6cd5\u503c\u53ef\u4ee5\u662f\u4e0b\u9762\u5176\u4e2d\u4e00\u4e2a\uff1a datatime.date \u7684\u5b9e\u4f8b\u3002 \u6574\u6570\u65f6\u95f4\u6233\uff0c\u5982 1531815911\u3002 \u5b57\u7b26\u4e32\u65f6\u95f4\u6233\uff0c\u5982 '1531815911'\u3002 \u7b26\u5408 dt_format \u7684\u65e5\u671f\u5b57\u7b26\u4e32\u3002\u5047\u8bbe dt_format \u4e3a '%Y/%m/%d' \uff0c\u5219\u5408\u6cd5\u7684\u5b57\u7b26\u4e32\u4e3a'2018/01/01'\u3002 \u6821\u9a8c\u901a\u8fc7\u540e\u8fd4\u56de\u4e00\u4e2a datatime.datetime \u7684\u5b9e\u4f8b\u3002 __init__(self, dt_format=None, **kwargs) dt_format \u65e5\u671f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3002\u5982\u679c dt_format \u7b49\u4e8e None \uff0c\u5219\u5c06\u5176\u8bbe\u4e3a\u9ed8\u8ba4\u503c '%Y/%m/%d' \u3002 kwargs \u5176\u5b83\u53c2\u6570\uff0c\u4f8b\u5982 BaseField \u6240\u9700\u7684\u53c2\u6570\u3002 \u7c7b\u5c5e\u6027 INTERNAL_TYPE datetime.date FIELD_TYPE_NAME 'date' PARAMS ['dt_format'] \u65b9\u6cd5 mock_data(self) \u8fd4\u56de\u968f\u673a\u751f\u6210\u7684\u65e5\u671f\u3002","title":"DateField"},{"location":"history/","text":"\u5386\u53f2\u7248\u672c Version 0.0.8 \u4fee\u590d #9 \u4f7f\u7528 poetry \u66ff\u4ee3\u4e4b\u524d\u7684 pipenv. \u5220\u9664\u4e00\u4e9b\u4ee3\u7801. Version 0.0.7 \u6dfb\u52a0 assert \u8bed\u53e5\u7684\u9519\u8bef\u4fe1\u606f\u3002 \u4fee\u590d URLField \u7684 scheme\u3002 Version 0.0.6 \u652f\u6301 i18n \u4fee\u590d bug\uff1aBaseValidationError. str \u5728 python3 \u8fd4\u56de bytes Version 0.0.5 \u4fee\u590d bug\uff1a\u5f53\u5b57\u6bb5\u662f\u53ef\u9009\u7684\u4e14\u6570\u636e\u4e2d\u7f3a\u5931\u8be5\u5b57\u6bb5\u65f6\uff0cvalidated_data \u5c06\u8be5\u5b57\u6bb5\u503c\u8bbe\u4e3a None\u3002\u6b63\u786e\u7684\u903b\u8f91\u5e94\u8be5\u548c\u539f\u6570\u636e\u4fdd\u6301\u4e00\u81f4\uff0cvalidated_data \u5e94\u8be5\u4e0d\u5b58\u5728\u8be5\u5b57\u6bb5\u503c\u3002 Version 0.0.4 DatetimeField \u7684 tzinfo \u53c2\u6570\u652f\u6301\u65f6\u533a\u540d\u79f0\u5b57\u7b26\u4e32 \u653e\u5f03 python2.6 Version 0.0.3 \u517c\u5bb9 python3 \u652f\u6301\u901a\u8fc7\u6570\u636e\u5b57\u5178\u521b\u5efa Validator\uff08create_validator\uff09 \u4f7f\u7528 TravisCI \u6d4b\u8bd5\u4ee3\u7801 Version 0.0.1 \u7b2c\u4e00\u4e2a\u53d1\u5e03\u7248\u672c. \u652f\u6301\u4ee5\u4e0b\u5b57\u6bb5: StringField NumberField IntegerField FloatField BoolField UUIDField MD5Field SHAField EmailField IPAddressField URLField EnumField DictField ListField TimestampField DatetimeField DateField \u652f\u6301\u81ea\u5b9a\u4e49\u5b57\u6bb5\u7ea7\u5b57\u6bb5\u9a8c\u8bc1 \u652f\u6301\u81ea\u5b9a\u4e49\u5168\u5c40\u6570\u636e\u9a8c\u8bc1","title":"\u5386\u53f2\u7248\u672c"},{"location":"history/#_1","text":"","title":"\u5386\u53f2\u7248\u672c"},{"location":"history/#version-008","text":"\u4fee\u590d #9 \u4f7f\u7528 poetry \u66ff\u4ee3\u4e4b\u524d\u7684 pipenv. \u5220\u9664\u4e00\u4e9b\u4ee3\u7801.","title":"Version 0.0.8"},{"location":"history/#version-007","text":"\u6dfb\u52a0 assert \u8bed\u53e5\u7684\u9519\u8bef\u4fe1\u606f\u3002 \u4fee\u590d URLField \u7684 scheme\u3002","title":"Version 0.0.7"},{"location":"history/#version-006","text":"\u652f\u6301 i18n \u4fee\u590d bug\uff1aBaseValidationError. str \u5728 python3 \u8fd4\u56de bytes","title":"Version 0.0.6"},{"location":"history/#version-005","text":"\u4fee\u590d bug\uff1a\u5f53\u5b57\u6bb5\u662f\u53ef\u9009\u7684\u4e14\u6570\u636e\u4e2d\u7f3a\u5931\u8be5\u5b57\u6bb5\u65f6\uff0cvalidated_data \u5c06\u8be5\u5b57\u6bb5\u503c\u8bbe\u4e3a None\u3002\u6b63\u786e\u7684\u903b\u8f91\u5e94\u8be5\u548c\u539f\u6570\u636e\u4fdd\u6301\u4e00\u81f4\uff0cvalidated_data \u5e94\u8be5\u4e0d\u5b58\u5728\u8be5\u5b57\u6bb5\u503c\u3002","title":"Version 0.0.5"},{"location":"history/#version-004","text":"DatetimeField \u7684 tzinfo \u53c2\u6570\u652f\u6301\u65f6\u533a\u540d\u79f0\u5b57\u7b26\u4e32 \u653e\u5f03 python2.6","title":"Version 0.0.4"},{"location":"history/#version-003","text":"\u517c\u5bb9 python3 \u652f\u6301\u901a\u8fc7\u6570\u636e\u5b57\u5178\u521b\u5efa Validator\uff08create_validator\uff09 \u4f7f\u7528 TravisCI \u6d4b\u8bd5\u4ee3\u7801","title":"Version 0.0.3"},{"location":"history/#version-001","text":"\u7b2c\u4e00\u4e2a\u53d1\u5e03\u7248\u672c. \u652f\u6301\u4ee5\u4e0b\u5b57\u6bb5: StringField NumberField IntegerField FloatField BoolField UUIDField MD5Field SHAField EmailField IPAddressField URLField EnumField DictField ListField TimestampField DatetimeField DateField \u652f\u6301\u81ea\u5b9a\u4e49\u5b57\u6bb5\u7ea7\u5b57\u6bb5\u9a8c\u8bc1 \u652f\u6301\u81ea\u5b9a\u4e49\u5168\u5c40\u6570\u636e\u9a8c\u8bc1","title":"Version 0.0.1"},{"location":"i18n/","text":"\u56fd\u9645\u5316 v0.0.6 \u65b0\u589e python-validator \u652f\u6301\u5bf9\u9519\u8bef\u4fe1\u606f\u8fdb\u884c\u56fd\u9645\u5316\uff0c\u9ed8\u8ba4\u652f\u6301\u4e2d\u6587\u548c\u82f1\u6587\uff0c\u8be5\u529f\u80fd\u901a\u8fc7 python \u5185\u7f6e\u7684 gettext \u6a21\u5757\u5b9e\u73b0\u3002 \u8bed\u8a00\u6587\u4ef6\uff08.po \u548c .mo \u6587\u4ef6\uff09\u8be6\u60c5 \u6233\u8fd9\u91cc \u3002 python-validator \u4f7f\u7528 gettext.translation \u7ffb\u8bd1\u6587\u672c\uff0c\u9ed8\u8ba4\u7684 localedir \u4e3a /path/to/site-packages/validator/locale \uff0c\u9ed8\u8ba4\u7684 languages \u4ece\u73af\u5883\u53d8\u91cf LANGUAGE \u3001 LC_ALL \u3001 LC_MESSAGES \u548c LANG \u4e2d\u83b7\u53d6\u3002 \u5047\u5982\u4f60\u60f3\u81ea\u5b9a\u4e49\u7ffb\u8bd1\u6587\u672c\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u6765\u5b9e\u73b0\uff1a PYTHON_VALIDATOR_LOCALE \uff0c\u8bbe\u7f6e\u4e3a\u4f60\u81ea\u5df1\u7684 localedir PYTHON_VALIDATOR_LANGUAGES \uff0c\u8bbe\u7f6e\u4e3a\u4f60\u60f3\u8981\u7684\u8bed\u8a00\u4ee3\u7801\u3002\u5047\u5982\u6709\u591a\u4e2a\u8bed\u8a00\uff0c\u5219\u4ee5 \",\" \u5206\u9694\u3002","title":"\u56fd\u9645\u5316"},{"location":"i18n/#_1","text":"v0.0.6 \u65b0\u589e python-validator \u652f\u6301\u5bf9\u9519\u8bef\u4fe1\u606f\u8fdb\u884c\u56fd\u9645\u5316\uff0c\u9ed8\u8ba4\u652f\u6301\u4e2d\u6587\u548c\u82f1\u6587\uff0c\u8be5\u529f\u80fd\u901a\u8fc7 python \u5185\u7f6e\u7684 gettext \u6a21\u5757\u5b9e\u73b0\u3002 \u8bed\u8a00\u6587\u4ef6\uff08.po \u548c .mo \u6587\u4ef6\uff09\u8be6\u60c5 \u6233\u8fd9\u91cc \u3002 python-validator \u4f7f\u7528 gettext.translation \u7ffb\u8bd1\u6587\u672c\uff0c\u9ed8\u8ba4\u7684 localedir \u4e3a /path/to/site-packages/validator/locale \uff0c\u9ed8\u8ba4\u7684 languages \u4ece\u73af\u5883\u53d8\u91cf LANGUAGE \u3001 LC_ALL \u3001 LC_MESSAGES \u548c LANG \u4e2d\u83b7\u53d6\u3002 \u5047\u5982\u4f60\u60f3\u81ea\u5b9a\u4e49\u7ffb\u8bd1\u6587\u672c\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u6765\u5b9e\u73b0\uff1a PYTHON_VALIDATOR_LOCALE \uff0c\u8bbe\u7f6e\u4e3a\u4f60\u81ea\u5df1\u7684 localedir PYTHON_VALIDATOR_LANGUAGES \uff0c\u8bbe\u7f6e\u4e3a\u4f60\u60f3\u8981\u7684\u8bed\u8a00\u4ee3\u7801\u3002\u5047\u5982\u6709\u591a\u4e2a\u8bed\u8a00\uff0c\u5219\u4ee5 \",\" \u5206\u9694\u3002","title":"\u56fd\u9645\u5316"},{"location":"license/","text":"The MIT License (MIT) Copyright \u00a9 2018 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"LICENSE"},{"location":"license/#the-mit-license-mit","text":"Copyright \u00a9 2018 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"The MIT License (MIT)"}]}